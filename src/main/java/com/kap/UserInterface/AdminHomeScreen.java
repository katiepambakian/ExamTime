/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kap.UserInterface;

import com.kap.examtimetabling.ExamTimetablingApp;
import com.kap.examtimetabling.domain.ExamTimetable;
import com.kap.examtimetabling.extras.readFromDatabase;
import static com.kap.examtimetabling.extras.readFromDatabase.readDatabase;
import static com.kap.examtimetabling.extras.writeToDatabase.writeToDatabase;
import com.kap.invigulationtimetabling.InvigulationTimetablingApp;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author katiepambakian
 */
public class AdminHomeScreen extends javax.swing.JFrame {

    private static String examSeriesId;
    private static String schoolid;

    //variables to pass into the next method
    private static String pathExam;
    private static String pathInvigulation;
    private static Integer durationExam;
    private static Integer durationInviuglation;
    private static float percentageInvigulation;
    private static float lenExamPerid;

    //getters
    public static String getSchoolID() {
        return schoolid;
    }

    public static String getSeriesID() {
        return examSeriesId;
    }

    public static String getpathExam() {
        return pathExam;
    }

    public static String getpathInvigulation() {
        return pathInvigulation;
    }

    public static Integer getdurationExam() {
        return durationExam;
    }

    public static Integer getdurationInvigulation() {
        return durationInviuglation;
    }

    public static float getPercentageInvigulation() {
        return percentageInvigulation;
    }

    public static float getLenExamPeriod() {
        return lenExamPerid;
    }

    /**
     * Creates new form AdminHomeScreen
     */
    public AdminHomeScreen() {
        initComponents();
        schoolid = LoginScreen.getId().get(0);
        personalise();
        loadExamSeries();
        parentPanel.removeAll();
        parentPanel.add(HomeScreen);
        parentPanel.repaint();
        parentPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        AdminHomeScreen = new javax.swing.JPanel();
        topBar = new javax.swing.JPanel();
        examTimetablingBt = new javax.swing.JButton();
        invigulationTimetableBt = new javax.swing.JButton();
        studentsBt = new javax.swing.JButton();
        staffbt = new javax.swing.JButton();
        signOut = new javax.swing.JButton();
        personalLabel = new javax.swing.JLabel();
        staffbt1 = new javax.swing.JButton();
        parentPanel = new javax.swing.JPanel();
        HomeScreen = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        examSeriesTable = new javax.swing.JTable();
        examTimetableMainScreenbt = new javax.swing.JButton();
        invigulationtimetablemainscreenbt = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        examseriestf = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        printTimetablesBt = new javax.swing.JButton();
        InputDataPanel = new javax.swing.JPanel();
        sidePanel1 = new javax.swing.JPanel();
        Subjectsbt = new javax.swing.JButton();
        examPage = new javax.swing.JButton();
        staffbt3 = new javax.swing.JButton();
        schoolPeriodBt = new javax.swing.JButton();
        timeslotBt = new javax.swing.JButton();
        inputDataPanelMain = new javax.swing.JPanel();
        examPanel = new javax.swing.JPanel();
        addExambt = new javax.swing.JButton();
        reloadBT1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        examTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        examNameft = new javax.swing.JTextField();
        examLengthtd = new javax.swing.JTextField();
        examSubjecttf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        deleteExambt = new javax.swing.JButton();
        subjectPanel = new javax.swing.JPanel();
        addSubjectbt = new javax.swing.JButton();
        subjectNametf = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        subjectTA = new javax.swing.JScrollPane();
        subjectnameta = new javax.swing.JTextArea();
        reloadBT = new javax.swing.JButton();
        errorMessageLb = new javax.swing.JLabel();
        deleteSubjectbt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        roomPanel = new javax.swing.JPanel();
        addExambt1 = new javax.swing.JButton();
        reloadBTroom = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        roomNameft1 = new javax.swing.JTextField();
        roomCapacitytf = new javax.swing.JTextField();
        roomInvigulatorstf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        infoLabelroom = new javax.swing.JLabel();
        deleteExambt1 = new javax.swing.JButton();
        schoolPeriodPanel = new javax.swing.JPanel();
        addSchoolPeriod = new javax.swing.JButton();
        reloadSchoolPeriods = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        schoolPeriodExam = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        startTime = new javax.swing.JTextField();
        endTime = new javax.swing.JTextField();
        length = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        infolabelSchoolPeriod = new javax.swing.JLabel();
        deleteSchoolPeiod = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        DayOfWeek = new javax.swing.JTextField();
        timeslotPanel = new javax.swing.JPanel();
        addtimeslot = new javax.swing.JButton();
        reloadBT3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        scrollpanel = new javax.swing.JScrollPane();
        timeslotstable = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        starttimetf = new javax.swing.JTextField();
        endtimetf = new javax.swing.JTextField();
        datetf = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        infoLabel2 = new javax.swing.JLabel();
        deletetiomeslot = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        lengthtf = new javax.swing.JTextField();
        invigulationTimetablePn = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        examtimetablefilename = new javax.swing.JTextField();
        invigulationtimetablefilenmae = new javax.swing.JTextField();
        lengthexamtimetable = new javax.swing.JTextField();
        invigulationsolving = new javax.swing.JTextField();
        percentageInvigulating = new javax.swing.JTextField();
        solveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        manageStudentsPn = new javax.swing.JPanel();
        studentDisplayPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        manageStudentsTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        managestudentstitle = new javax.swing.JLabel();
        reloadStudents = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        firstNameStudent = new javax.swing.JTextField();
        lastNameStudent = new javax.swing.JTextField();
        usernameStudent = new javax.swing.JTextField();
        passwordStudent = new javax.swing.JTextField();
        studentId = new javax.swing.JTextField();
        deleteStudent = new javax.swing.JButton();
        editStudent = new javax.swing.JButton();
        subjectTb = new javax.swing.JTextField();
        addStudentSubject = new javax.swing.JButton();
        deleteStudentSubject = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        studentSubjectTable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        examPeriodtable = new javax.swing.JTable();
        examperiodTF = new javax.swing.JTextField();
        addStudentExamPeriod = new javax.swing.JButton();
        deleteStudentExamPeriod = new javax.swing.JButton();
        manageStaffPn = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        reloadStaff = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        firstnameStaff = new javax.swing.JTextField();
        lastnameStaff = new javax.swing.JTextField();
        usernameStaff = new javax.swing.JTextField();
        passwordStaff = new javax.swing.JTextField();
        studentidStaff = new javax.swing.JTextField();
        deleteStaff = new javax.swing.JButton();
        editStaff = new javax.swing.JButton();
        timetableStaff = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        daysworking = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        sidePanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        staffTable = new javax.swing.JTable();
        ViewExamTimetable = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        examtimetable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(994, 562));
        setResizable(false);
        setSize(new java.awt.Dimension(994, 562));

        AdminHomeScreen.setBackground(new java.awt.Color(255, 255, 255));
        AdminHomeScreen.setAlignmentX(0.0F);
        AdminHomeScreen.setAlignmentY(0.0F);
        AdminHomeScreen.setMaximumSize(new java.awt.Dimension(994, 562));
        AdminHomeScreen.setMinimumSize(new java.awt.Dimension(994, 562));
        AdminHomeScreen.setPreferredSize(new java.awt.Dimension(994, 562));
        AdminHomeScreen.setSize(new java.awt.Dimension(994, 562));

        topBar.setBackground(new java.awt.Color(255, 153, 102));
        topBar.setAlignmentX(0.0F);
        topBar.setAlignmentY(0.0F);
        topBar.setMaximumSize(new java.awt.Dimension(623, 37));
        topBar.setMinimumSize(new java.awt.Dimension(623, 37));
        topBar.setMixingCutoutShape(null);
        topBar.setSize(new java.awt.Dimension(815, 37));

        examTimetablingBt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        examTimetablingBt.setText("INPUT DATA");
        examTimetablingBt.setBorder(null);
        examTimetablingBt.setEnabled(false);
        examTimetablingBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examTimetablingBtActionPerformed(evt);
            }
        });

        invigulationTimetableBt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        invigulationTimetableBt.setText("GENERATE TIMETABLES");
        invigulationTimetableBt.setBorder(null);
        invigulationTimetableBt.setEnabled(false);
        invigulationTimetableBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invigulationTimetableBtActionPerformed(evt);
            }
        });

        studentsBt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        studentsBt.setText("STUDENTS");
        studentsBt.setBorder(null);
        studentsBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentsBtActionPerformed(evt);
            }
        });

        staffbt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        staffbt.setText("STAFF");
        staffbt.setBorder(null);
        staffbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffbtActionPerformed(evt);
            }
        });

        signOut.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        signOut.setText("SIGN OUT");
        signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutActionPerformed(evt);
            }
        });

        personalLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        personalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        personalLabel.setText("WELCOME: ");
        personalLabel.setToolTipText("");

        staffbt1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        staffbt1.setText("HOME");
        staffbt1.setBorder(null);
        staffbt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffbt1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topBarLayout = new javax.swing.GroupLayout(topBar);
        topBar.setLayout(topBarLayout);
        topBarLayout.setHorizontalGroup(
            topBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffbt1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentsBt, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staffbt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(examTimetablingBt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(invigulationTimetableBt)
                .addGap(37, 37, 37)
                .addComponent(personalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(88, 88, 88)
                .addComponent(signOut)
                .addContainerGap())
        );
        topBarLayout.setVerticalGroup(
            topBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(topBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signOut)
                    .addComponent(invigulationTimetableBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(examTimetablingBt)
                    .addComponent(staffbt)
                    .addComponent(studentsBt)
                    .addComponent(staffbt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(personalLabel))
                .addGap(7, 7, 7))
        );

        parentPanel.setBackground(new java.awt.Color(0, 51, 102));
        parentPanel.setAlignmentX(0.0F);
        parentPanel.setAlignmentY(0.0F);
        parentPanel.setMaximumSize(new java.awt.Dimension(824, 525));
        parentPanel.setSize(new java.awt.Dimension(994, 525));
        parentPanel.setLayout(new java.awt.CardLayout());

        HomeScreen.setBackground(new java.awt.Color(0, 51, 102));
        HomeScreen.setMinimumSize(new java.awt.Dimension(994, 525));
        HomeScreen.setPreferredSize(new java.awt.Dimension(994, 525));
        HomeScreen.setSize(new java.awt.Dimension(994, 525));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("WELCOME BACK!");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel5.setText("Exam Series");

        examSeriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(examSeriesTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        examTimetableMainScreenbt.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        examTimetableMainScreenbt.setText("INPUT DATA");
        examTimetableMainScreenbt.setEnabled(false);
        examTimetableMainScreenbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examTimetableMainScreenbtActionPerformed(evt);
            }
        });

        invigulationtimetablemainscreenbt.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        invigulationtimetablemainscreenbt.setText("GENERATE TIMETABLES");
        invigulationtimetablemainscreenbt.setEnabled(false);
        invigulationtimetablemainscreenbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invigulationtimetablemainscreenbtActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jButton3.setText("MANAGE STAFF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jButton4.setText("MANAGE STUDENTS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Which exam series would you like to edit? (enter ID)");

        jButton5.setText("SUBMIT");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("CREATE NEW");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        printTimetablesBt.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        printTimetablesBt.setText("PRINT TIMETABLES");
        printTimetablesBt.setEnabled(false);
        printTimetablesBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTimetablesBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomeScreenLayout = new javax.swing.GroupLayout(HomeScreen);
        HomeScreen.setLayout(HomeScreenLayout);
        HomeScreenLayout.setHorizontalGroup(
            HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomeScreenLayout.createSequentialGroup()
                .addGroup(HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomeScreenLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(HomeScreenLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(HomeScreenLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(examseriestf)
                            .addComponent(examTimetableMainScreenbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(invigulationtimetablemainscreenbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(printTimetablesBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        HomeScreenLayout.setVerticalGroup(
            HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomeScreenLayout.createSequentialGroup()
                .addGroup(HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomeScreenLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(examseriestf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(HomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton6))
                        .addGap(22, 22, 22)
                        .addComponent(examTimetableMainScreenbt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(invigulationtimetablemainscreenbt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(printTimetablesBt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomeScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        parentPanel.add(HomeScreen, "card6");

        InputDataPanel.setBackground(new java.awt.Color(255, 255, 255));
        InputDataPanel.setAlignmentX(0.0F);
        InputDataPanel.setAlignmentY(0.0F);
        InputDataPanel.setMinimumSize(new java.awt.Dimension(994, 525));
        InputDataPanel.setPreferredSize(new java.awt.Dimension(994, 525));
        InputDataPanel.setSize(new java.awt.Dimension(994, 525));

        sidePanel1.setBackground(new java.awt.Color(0, 51, 102));
        sidePanel1.setAlignmentX(0.0F);
        sidePanel1.setAlignmentY(0.0F);
        sidePanel1.setMaximumSize(new java.awt.Dimension(200, 525));
        sidePanel1.setPreferredSize(new java.awt.Dimension(164, 525));
        sidePanel1.setRequestFocusEnabled(false);
        sidePanel1.setSize(new java.awt.Dimension(164, 525));

        Subjectsbt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        Subjectsbt.setText("SUBJECTS");
        Subjectsbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubjectsbtActionPerformed(evt);
            }
        });

        examPage.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        examPage.setText("EXAMS");
        examPage.setToolTipText("");
        examPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examPageActionPerformed(evt);
            }
        });

        staffbt3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        staffbt3.setText("ROOMS");
        staffbt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffbt3ActionPerformed(evt);
            }
        });

        schoolPeriodBt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        schoolPeriodBt.setText("SCHOOL PERIODS");
        schoolPeriodBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schoolPeriodBtActionPerformed(evt);
            }
        });

        timeslotBt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        timeslotBt.setText("EXAM TIMESLOTS");
        timeslotBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeslotBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanel1Layout = new javax.swing.GroupLayout(sidePanel1);
        sidePanel1.setLayout(sidePanel1Layout);
        sidePanel1Layout.setHorizontalGroup(
            sidePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Subjectsbt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(examPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staffbt3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(schoolPeriodBt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeslotBt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sidePanel1Layout.setVerticalGroup(
            sidePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(Subjectsbt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(examPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(staffbt3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(schoolPeriodBt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeslotBt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputDataPanelMain.setAlignmentX(0.0F);
        inputDataPanelMain.setAlignmentY(0.0F);
        inputDataPanelMain.setLayout(new java.awt.CardLayout());

        examPanel.setBackground(new java.awt.Color(255, 255, 255));
        examPanel.setSize(new java.awt.Dimension(747, 525));
        examPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                examPanelComponentAdded(evt);
            }
        });

        addExambt.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        addExambt.setText("ADD");
        addExambt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExambtActionPerformed(evt);
            }
        });

        reloadBT1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        reloadBT1.setText("RELOAD");
        reloadBT1.setBorderPainted(false);
        reloadBT1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadBT1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jScrollPane5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane5MouseClicked(evt);
            }
        });

        examTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Length", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(examTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Charter", 1, 24)); // NOI18N
        jLabel8.setText("EXAM EDITOR");

        examNameft.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        examNameft.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        examNameft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        examLengthtd.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        examLengthtd.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        examLengthtd.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        examLengthtd.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        examSubjecttf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        examSubjecttf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        examSubjecttf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        examSubjecttf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examSubjecttfActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel7.setText("Name");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel9.setText("Length");

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel11.setText("Subject name");

        infoLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        infoLabel.setText("ADD OR DELETE EXAMS");

        deleteExambt.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        deleteExambt.setText("DELETE");
        deleteExambt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteExambtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout examPanelLayout = new javax.swing.GroupLayout(examPanel);
        examPanel.setLayout(examPanelLayout);
        examPanelLayout.setHorizontalGroup(
            examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, examPanelLayout.createSequentialGroup()
                .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(examPanelLayout.createSequentialGroup()
                        .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(examPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(examPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reloadBT1))
                                    .addComponent(examNameft)
                                    .addComponent(examLengthtd)
                                    .addComponent(examSubjecttf)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(examPanelLayout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addComponent(infoLabel)
                                .addGap(0, 143, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(examPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addExambt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(deleteExambt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        examPanelLayout.setVerticalGroup(
            examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(examPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(examPanelLayout.createSequentialGroup()
                        .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reloadBT1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoLabel)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(examNameft, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(examLengthtd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addGap(3, 3, 3)
                        .addComponent(examSubjecttf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addExambt)
                            .addComponent(deleteExambt))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        inputDataPanelMain.add(examPanel, "card2");

        subjectPanel.setBackground(new java.awt.Color(255, 255, 255));
        subjectPanel.setPreferredSize(new java.awt.Dimension(747, 525));
        subjectPanel.setSize(new java.awt.Dimension(747, 525));
        subjectPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                subjectPanelComponentAdded(evt);
            }
        });
        subjectPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subjectPanelFocusGained(evt);
            }
        });

        addSubjectbt.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        addSubjectbt.setText("ADD");
        addSubjectbt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 153, 102), null, null));
        addSubjectbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubjectbtActionPerformed(evt);
            }
        });

        subjectNametf.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        subjectNametf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        subjectNametf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        subjectNametf.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        subjectNametf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectNametfActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(1);
        jTextArea2.setText("Enter a new subject to add it to the list or enter an old subject and click delete to remove it.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jScrollPane4.setViewportView(jTextArea2);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        subjectnameta.setEditable(false);
        subjectnameta.setBackground(new java.awt.Color(255, 255, 255));
        subjectnameta.setColumns(20);
        subjectnameta.setRows(5);
        subjectnameta.setBorder(null);
        subjectTA.setViewportView(subjectnameta);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subjectTA, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subjectTA)
                .addContainerGap())
        );

        reloadBT.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        reloadBT.setText("RELOAD");
        reloadBT.setBorderPainted(false);
        reloadBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadBTActionPerformed(evt);
            }
        });

        errorMessageLb.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        errorMessageLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        deleteSubjectbt.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        deleteSubjectbt.setText("DELETE");
        deleteSubjectbt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 153, 102), null, null));
        deleteSubjectbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSubjectbtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Charter", 1, 24)); // NOI18N
        jLabel2.setText("SUBJECT EDITOR");

        javax.swing.GroupLayout subjectPanelLayout = new javax.swing.GroupLayout(subjectPanel);
        subjectPanel.setLayout(subjectPanelLayout);
        subjectPanelLayout.setHorizontalGroup(
            subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMessageLb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(subjectPanelLayout.createSequentialGroup()
                        .addGroup(subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subjectPanelLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(addSubjectbt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(deleteSubjectbt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectNametf, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(subjectPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reloadBT)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subjectPanelLayout.setVerticalGroup(
            subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, subjectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reloadBT))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectNametf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSubjectbt)
                    .addComponent(deleteSubjectbt))
                .addContainerGap(249, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        inputDataPanelMain.add(subjectPanel, "card2");

        roomPanel.setBackground(new java.awt.Color(255, 255, 255));
        roomPanel.setSize(new java.awt.Dimension(747, 525));
        roomPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                roomPanelComponentAdded(evt);
            }
        });

        addExambt1.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        addExambt1.setText("ADD");
        addExambt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExambt1ActionPerformed(evt);
            }
        });

        reloadBTroom.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        reloadBTroom.setText("RELOAD");
        reloadBTroom.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        reloadBTroom.setBorderPainted(false);
        reloadBTroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadBTroomActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        jScrollPane6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane6MouseClicked(evt);
            }
        });

        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Capacity", "Num. Invigulators"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(roomTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Charter", 1, 24)); // NOI18N
        jLabel10.setText("ROOM EDITOR");

        roomNameft1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        roomNameft1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        roomNameft1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        roomCapacitytf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        roomCapacitytf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        roomCapacitytf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        roomCapacitytf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCapacitytfActionPerformed(evt);
            }
        });

        roomInvigulatorstf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        roomInvigulatorstf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        roomInvigulatorstf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        roomInvigulatorstf.setCaretColor(new java.awt.Color(255, 255, 255));
        roomInvigulatorstf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomInvigulatorstfActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel12.setText("Name");

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel13.setText("Capacity");

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel14.setText("Number of Invigulators required");

        infoLabelroom.setBackground(new java.awt.Color(255, 255, 255));
        infoLabelroom.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        infoLabelroom.setText("ADD OR DELETE ROOMS");

        deleteExambt1.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        deleteExambt1.setText("DELETE");
        deleteExambt1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 153, 102), null, null));
        deleteExambt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteExambt1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roomPanelLayout = new javax.swing.GroupLayout(roomPanel);
        roomPanel.setLayout(roomPanelLayout);
        roomPanelLayout.setHorizontalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomPanelLayout.createSequentialGroup()
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPanelLayout.createSequentialGroup()
                        .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(roomPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reloadBTroom))
                                    .addComponent(roomNameft1)
                                    .addComponent(roomCapacitytf)
                                    .addComponent(roomInvigulatorstf)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addComponent(infoLabelroom)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(roomPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addExambt1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(deleteExambt1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)))
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        roomPanelLayout.setVerticalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(roomPanelLayout.createSequentialGroup()
                        .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reloadBTroom))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoLabelroom)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomNameft1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomCapacitytf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addGap(3, 3, 3)
                        .addComponent(roomInvigulatorstf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addExambt1)
                            .addComponent(deleteExambt1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        inputDataPanelMain.add(roomPanel, "card2");

        schoolPeriodPanel.setBackground(new java.awt.Color(255, 255, 255));
        schoolPeriodPanel.setSize(new java.awt.Dimension(747, 525));
        schoolPeriodPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                schoolPeriodPanelComponentAdded(evt);
            }
        });

        addSchoolPeriod.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        addSchoolPeriod.setText("ADD");
        addSchoolPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSchoolPeriodActionPerformed(evt);
            }
        });

        reloadSchoolPeriods.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        reloadSchoolPeriods.setText("RELOAD");
        reloadSchoolPeriods.setBorderPainted(false);
        reloadSchoolPeriods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadSchoolPeriodsActionPerformed(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));

        jScrollPane10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane10MouseClicked(evt);
            }
        });

        schoolPeriodExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period ID", "Starttime", "Endtime", "Length", "Day of the week"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schoolPeriodExam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                schoolPeriodExamMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(schoolPeriodExam);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Charter", 1, 24)); // NOI18N
        jLabel15.setText("SCHOOL PERIOD EDITOR");

        startTime.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        startTime.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        startTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        endTime.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        endTime.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        endTime.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        endTime.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        length.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        length.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        length.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        length.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel26.setText("Start time - HH:mm:ss");

        jLabel27.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel27.setText("endtime - HH:mm:ss");

        jLabel28.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel28.setText("length");

        infolabelSchoolPeriod.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        infolabelSchoolPeriod.setText("ADD OR DELETE SCHOOL PERIODS");

        deleteSchoolPeiod.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        deleteSchoolPeiod.setText("DELETE");
        deleteSchoolPeiod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSchoolPeiodActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel33.setText("Day Of the Week");

        DayOfWeek.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        DayOfWeek.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        DayOfWeek.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        DayOfWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayOfWeekActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout schoolPeriodPanelLayout = new javax.swing.GroupLayout(schoolPeriodPanel);
        schoolPeriodPanel.setLayout(schoolPeriodPanelLayout);
        schoolPeriodPanelLayout.setHorizontalGroup(
            schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(length)
                            .addComponent(DayOfWeek)
                            .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                                .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, schoolPeriodPanelLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(addSchoolPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteSchoolPeiod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29))
                                    .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(reloadSchoolPeriods))
                                    .addComponent(endTime)
                                    .addComponent(startTime))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, schoolPeriodPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(infolabelSchoolPeriod)
                        .addGap(73, 73, 73)))
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        schoolPeriodPanelLayout.setVerticalGroup(
            schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(schoolPeriodPanelLayout.createSequentialGroup()
                        .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reloadSchoolPeriods))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infolabelSchoolPeriod)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addGap(3, 3, 3)
                        .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33)
                        .addGap(3, 3, 3)
                        .addComponent(DayOfWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(schoolPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteSchoolPeiod)
                            .addComponent(addSchoolPeriod))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        inputDataPanelMain.add(schoolPeriodPanel, "card2");

        timeslotPanel.setBackground(new java.awt.Color(255, 255, 255));
        timeslotPanel.setSize(new java.awt.Dimension(747, 525));
        timeslotPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                timeslotPanelComponentAdded(evt);
            }
        });

        addtimeslot.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        addtimeslot.setText("ADD");
        addtimeslot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtimeslotActionPerformed(evt);
            }
        });

        reloadBT3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        reloadBT3.setText("RELOAD");
        reloadBT3.setBorderPainted(false);
        reloadBT3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadBT3ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));

        scrollpanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrollpanelMouseClicked(evt);
            }
        });

        timeslotstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Starttime", "Endtime", "Length", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        timeslotstable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeslotstableMouseClicked(evt);
            }
        });
        scrollpanel.setViewportView(timeslotstable);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel29.setBackground(new java.awt.Color(255, 255, 255));
        jLabel29.setFont(new java.awt.Font("Charter", 1, 24)); // NOI18N
        jLabel29.setText("TIMESLOT EDITOR");

        starttimetf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        starttimetf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        starttimetf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        endtimetf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        endtimetf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        endtimetf.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        endtimetf.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        datetf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        datetf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        datetf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        datetf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datetfActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel30.setText("Start time - hh:mm:ss");

        jLabel31.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel31.setText("End Time - hh:mm:ss");

        jLabel32.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel32.setText("Date - YYYY-MM-DD");

        infoLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        infoLabel2.setText("ADD OR DELETE EXAM TIMESLOTS");

        deletetiomeslot.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        deletetiomeslot.setText("DELETE");
        deletetiomeslot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletetiomeslotActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel34.setText("Length");

        lengthtf.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lengthtf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        lengthtf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        lengthtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthtfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout timeslotPanelLayout = new javax.swing.GroupLayout(timeslotPanel);
        timeslotPanel.setLayout(timeslotPanelLayout);
        timeslotPanelLayout.setHorizontalGroup(
            timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lengthtf)
                    .addComponent(datetf)
                    .addGroup(timeslotPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(infoLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(endtimetf)
                    .addComponent(starttimetf)
                    .addGroup(timeslotPanelLayout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(reloadBT3))
                    .addGroup(timeslotPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(addtimeslot, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deletetiomeslot, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        timeslotPanelLayout.setVerticalGroup(
            timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeslotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(timeslotPanelLayout.createSequentialGroup()
                        .addGroup(timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reloadBT3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoLabel2)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(starttimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endtimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addGap(3, 3, 3)
                        .addComponent(datetf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel34)
                        .addGap(3, 3, 3)
                        .addComponent(lengthtf, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(timeslotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addtimeslot)
                            .addComponent(deletetiomeslot))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        inputDataPanelMain.add(timeslotPanel, "card2");

        javax.swing.GroupLayout InputDataPanelLayout = new javax.swing.GroupLayout(InputDataPanel);
        InputDataPanel.setLayout(InputDataPanelLayout);
        InputDataPanelLayout.setHorizontalGroup(
            InputDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputDataPanelLayout.createSequentialGroup()
                .addComponent(sidePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputDataPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InputDataPanelLayout.setVerticalGroup(
            InputDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputDataPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sidePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        parentPanel.add(InputDataPanel, "card2");

        invigulationTimetablePn.setBackground(new java.awt.Color(0, 51, 102));
        invigulationTimetablePn.setAlignmentX(0.0F);
        invigulationTimetablePn.setAlignmentY(0.0F);
        invigulationTimetablePn.setPreferredSize(new java.awt.Dimension(994, 525));
        invigulationTimetablePn.setSize(new java.awt.Dimension(994, 525));

        jLabel36.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Exam timetable file name:");

        jLabel37.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Invigulation timetable file name:");

        jLabel38.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Length of exam timetable solving:");

        jLabel39.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Length of invigulation timetable solving");
        jLabel39.setToolTipText("");

        examtimetablefilename.setText("/Users/katiepambakian/Programming Project/target folder/examTimetable.xlsx");
        examtimetablefilename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examtimetablefilenameActionPerformed(evt);
            }
        });

        invigulationtimetablefilenmae.setText("/Users/katiepambakian/Programming Project/target folder/invigulationTimetable.xlsx");
        invigulationtimetablefilenmae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invigulationtimetablefilenmaeActionPerformed(evt);
            }
        });

        lengthexamtimetable.setText("10");

        invigulationsolving.setText("10");

        percentageInvigulating.setText("100");

        solveButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        solveButton.setForeground(new java.awt.Color(255, 153, 102));
        solveButton.setText("SOLVE");
        solveButton.setLocation(new java.awt.Point(1, 0));
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 51, 102));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("What percentage of teachers frees would you like to be user with invigulations (The higher the value the more likely a solution will be found)");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel40.setBackground(new java.awt.Color(0, 51, 102));
        jLabel40.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Exam and Invigilation Timetabling");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout invigulationTimetablePnLayout = new javax.swing.GroupLayout(invigulationTimetablePn);
        invigulationTimetablePn.setLayout(invigulationTimetablePnLayout);
        invigulationTimetablePnLayout.setHorizontalGroup(
            invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                                .addGap(228, 228, 228)
                                .addComponent(lengthexamtimetable, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel39)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addComponent(invigulationsolving, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invigulationTimetablePnLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(percentageInvigulating)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel38)
                            .addComponent(jLabel37)
                            .addComponent(jLabel36))
                        .addGap(18, 18, 18)
                        .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(examtimetablefilename)
                            .addComponent(invigulationtimetablefilenmae, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        invigulationTimetablePnLayout.setVerticalGroup(
            invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(examtimetablefilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(invigulationtimetablefilenmae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthexamtimetable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invigulationsolving, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(invigulationTimetablePnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(percentageInvigulating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(invigulationTimetablePnLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
        );

        parentPanel.add(invigulationTimetablePn, "card3");

        manageStudentsPn.setAlignmentX(0.0F);
        manageStudentsPn.setAlignmentY(0.0F);
        manageStudentsPn.setPreferredSize(new java.awt.Dimension(994, 525));
        manageStudentsPn.setSize(new java.awt.Dimension(994, 525));

        studentDisplayPanel.setBackground(new java.awt.Color(0, 51, 102));
        studentDisplayPanel.setAlignmentX(0.0F);
        studentDisplayPanel.setAlignmentY(0.0F);
        studentDisplayPanel.setMaximumSize(new java.awt.Dimension(164, 525));
        studentDisplayPanel.setMinimumSize(new java.awt.Dimension(164, 525));
        studentDisplayPanel.setPreferredSize(new java.awt.Dimension(164, 525));
        studentDisplayPanel.setSize(new java.awt.Dimension(164, 525));

        manageStudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "StudentId", "Firstname", "Lastname", "Password", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        manageStudentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manageStudentsTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(manageStudentsTable);

        javax.swing.GroupLayout studentDisplayPanelLayout = new javax.swing.GroupLayout(studentDisplayPanel);
        studentDisplayPanel.setLayout(studentDisplayPanelLayout);
        studentDisplayPanelLayout.setHorizontalGroup(
            studentDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        studentDisplayPanelLayout.setVerticalGroup(
            studentDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        managestudentstitle.setBackground(new java.awt.Color(255, 255, 255));
        managestudentstitle.setFont(new java.awt.Font("Charter", 1, 36)); // NOI18N
        managestudentstitle.setText("MANAGE STUDENTS");

        reloadStudents.setText("REOAD");
        reloadStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadStudentsActionPerformed(evt);
            }
        });

        jLabel4.setText("FIRST NAME");

        jLabel6.setText("LAST NAME");

        jLabel16.setText("USERNAME");

        jLabel17.setText("PASSWORD");

        jLabel18.setText("STUDENT ID");

        firstNameStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lastNameStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        usernameStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        passwordStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        studentId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        deleteStudent.setText("DELETE");
        deleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentActionPerformed(evt);
            }
        });

        editStudent.setText("EDIT");
        editStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStudentActionPerformed(evt);
            }
        });

        subjectTb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        addStudentSubject.setText("ADD");
        addStudentSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentSubjectActionPerformed(evt);
            }
        });

        deleteStudentSubject.setText("DELETE");
        deleteStudentSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentSubjectActionPerformed(evt);
            }
        });

        studentSubjectTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        studentSubjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Subjects Studying"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentSubjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentSubjectTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(studentSubjectTable);

        examPeriodtable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        examPeriodtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Examperiod"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examPeriodtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examPeriodtableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(examPeriodtable);

        examperiodTF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        addStudentExamPeriod.setText("ADD");
        addStudentExamPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentExamPeriodActionPerformed(evt);
            }
        });

        deleteStudentExamPeriod.setText("DELETE");
        deleteStudentExamPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentExamPeriodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(editStudent)
                .addGap(63, 63, 63)
                .addComponent(deleteStudent)
                .addContainerGap(192, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(subjectTb)
                                    .addComponent(addStudentSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteStudentSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel16)
                                                .addComponent(jLabel17))
                                            .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel18)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(firstNameStudent)
                                            .addComponent(lastNameStudent)
                                            .addComponent(usernameStudent)
                                            .addComponent(passwordStudent)
                                            .addComponent(studentId)))
                                    .addComponent(managestudentstitle, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(examperiodTF, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(addStudentExamPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteStudentExamPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reloadStudents)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(managestudentstitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(reloadStudents)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(firstNameStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lastNameStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(usernameStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(passwordStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(studentId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteStudent)
                    .addComponent(editStudent))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(subjectTb, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addStudentSubject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteStudentSubject))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(examperiodTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addStudentExamPeriod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteStudentExamPeriod)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout manageStudentsPnLayout = new javax.swing.GroupLayout(manageStudentsPn);
        manageStudentsPn.setLayout(manageStudentsPnLayout);
        manageStudentsPnLayout.setHorizontalGroup(
            manageStudentsPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageStudentsPnLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        manageStudentsPnLayout.setVerticalGroup(
            manageStudentsPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(manageStudentsPnLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        parentPanel.add(manageStudentsPn, "card4");

        manageStaffPn.setBackground(new java.awt.Color(255, 255, 255));
        manageStaffPn.setAlignmentX(0.0F);
        manageStaffPn.setAlignmentY(0.0F);
        manageStaffPn.setPreferredSize(new java.awt.Dimension(994, 525));
        manageStaffPn.setSize(new java.awt.Dimension(994, 525));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Charter", 1, 36)); // NOI18N
        jLabel19.setText("MANAGE TEACHERS");

        reloadStaff.setText("RELOAD");
        reloadStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadStaffActionPerformed(evt);
            }
        });

        jLabel20.setText("FIRST NAME");

        jLabel21.setText("LAST NAME");

        jLabel22.setText("USERNAME");

        jLabel23.setText("PASSWORD");

        jLabel24.setText("STUDENT ID");

        firstnameStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lastnameStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        usernameStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        passwordStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        studentidStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        deleteStaff.setText("DELETE");
        deleteStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStaffActionPerformed(evt);
            }
        });

        editStaff.setText("EDIT");
        editStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStaffActionPerformed(evt);
            }
        });

        timetableStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel25.setText("TIMETABLE");

        daysworking.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel35.setText("DAYSWORKING");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap(9, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reloadStaff))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel24))
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(firstnameStaff, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(lastnameStaff)
                            .addComponent(usernameStaff)
                            .addComponent(passwordStaff)
                            .addComponent(studentidStaff)
                            .addComponent(timetableStaff)
                            .addComponent(daysworking))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(editStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteStaff)
                .addGap(126, 126, 126))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reloadStaff))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(firstnameStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(lastnameStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(usernameStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(passwordStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(studentidStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timetableStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daysworking, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteStaff)
                    .addComponent(editStaff))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sidePanel4.setBackground(new java.awt.Color(0, 51, 102));
        sidePanel4.setAlignmentX(0.0F);
        sidePanel4.setAlignmentY(0.0F);
        sidePanel4.setMaximumSize(new java.awt.Dimension(164, 525));
        sidePanel4.setMinimumSize(new java.awt.Dimension(164, 525));
        sidePanel4.setPreferredSize(new java.awt.Dimension(164, 525));
        sidePanel4.setSize(new java.awt.Dimension(164, 525));

        staffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEACHER ID", "FIRST NAME", "LAST NAME", "PASSWORD", "USERNAME", "TIMETABLE", "DAYS WORKING"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        staffTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(staffTable);

        javax.swing.GroupLayout sidePanel4Layout = new javax.swing.GroupLayout(sidePanel4);
        sidePanel4.setLayout(sidePanel4Layout);
        sidePanel4Layout.setHorizontalGroup(
            sidePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addContainerGap())
        );
        sidePanel4Layout.setVerticalGroup(
            sidePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout manageStaffPnLayout = new javax.swing.GroupLayout(manageStaffPn);
        manageStaffPn.setLayout(manageStaffPnLayout);
        manageStaffPnLayout.setHorizontalGroup(
            manageStaffPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageStaffPnLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sidePanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE))
        );
        manageStaffPnLayout.setVerticalGroup(
            manageStaffPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidePanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(manageStaffPnLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        parentPanel.add(manageStaffPn, "card5");

        ViewExamTimetable.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setBackground(new java.awt.Color(0, 51, 102));

        examtimetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "StartTime", "Subject", "Exam", "Length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(examtimetable);

        jButton2.setText("RELOAD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout ViewExamTimetableLayout = new javax.swing.GroupLayout(ViewExamTimetable);
        ViewExamTimetable.setLayout(ViewExamTimetableLayout);
        ViewExamTimetableLayout.setHorizontalGroup(
            ViewExamTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ViewExamTimetableLayout.setVerticalGroup(
            ViewExamTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        parentPanel.add(ViewExamTimetable, "card7");

        javax.swing.GroupLayout AdminHomeScreenLayout = new javax.swing.GroupLayout(AdminHomeScreen);
        AdminHomeScreen.setLayout(AdminHomeScreenLayout);
        AdminHomeScreenLayout.setHorizontalGroup(
            AdminHomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(topBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        AdminHomeScreenLayout.setVerticalGroup(
            AdminHomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminHomeScreenLayout.createSequentialGroup()
                .addComponent(topBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 994, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(AdminHomeScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(AdminHomeScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void staffbt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffbt3ActionPerformed
        // TODO add your handling code here:
        inputDataPanelMain.removeAll();
        inputDataPanelMain.add(roomPanel);
        inputDataPanelMain.repaint();
        inputDataPanelMain.revalidate();
    }//GEN-LAST:event_staffbt3ActionPerformed

    private void examPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examPageActionPerformed
        // TODO add your handling code here:
        inputDataPanelMain.removeAll();
        inputDataPanelMain.add(examPanel);
        inputDataPanelMain.repaint();
        inputDataPanelMain.revalidate();
    }//GEN-LAST:event_examPageActionPerformed

    private void SubjectsbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubjectsbtActionPerformed
        // TODO add your handling code here:
        inputDataPanelMain.removeAll();
        inputDataPanelMain.add(subjectPanel);
        inputDataPanelMain.repaint();
        inputDataPanelMain.revalidate();

        loadSubjectData();
    }//GEN-LAST:event_SubjectsbtActionPerformed

    private void staffbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffbtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(manageStaffPn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_staffbtActionPerformed

    private void studentsBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentsBtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(manageStudentsPn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_studentsBtActionPerformed

    private void invigulationTimetableBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invigulationTimetableBtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(invigulationTimetablePn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_invigulationTimetableBtActionPerformed

    private void examTimetablingBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examTimetablingBtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(InputDataPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_examTimetablingBtActionPerformed

    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginScreen().setVisible(true);
    }//GEN-LAST:event_signOutActionPerformed

    private void subjectPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_subjectPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectPanelComponentAdded

    private void reloadBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadBTActionPerformed
        // TODO add your handling code here:
        loadSubjectData();
    }//GEN-LAST:event_reloadBTActionPerformed

    private void addSubjectbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubjectbtActionPerformed
        //get the name of the new subject
        String subject = subjectNametf.getText();
        //check that it is not Left empty
        if (!"".equals(subject)) {
            //get the existing items from database
            String SQLGet = "SELECT * FROM \"ExamTime\".subjects";
            String columnLabel = "subjectname";
            List<String> subjectList = (readFromDatabase.readDatabase(SQLGet, columnLabel));
            //check that the new subject is not already in the database
            if (!(subjectList.contains(subject))) {
                //write the subject to the database
                String SQL = String.format("INSERT INTO \"ExamTime\".subjects (subjectname) VALUES ('%s');", subject);
                writeToDatabase(SQL);
                //reload the list 
                loadSubjectData();
                errorMessageLb.setText("Sucessfully added");
            } else {
                errorMessageLb.setText("That subject is already in the database");
            }
        } else {
            errorMessageLb.setText("Please enter a subject to add");
        }

    }//GEN-LAST:event_addSubjectbtActionPerformed

    private void examPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_examPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_examPanelComponentAdded

    private void subjectPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subjectPanelFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_subjectPanelFocusGained

    private void deleteSubjectbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSubjectbtActionPerformed
        // TODO add your handling code here:
        //get the name of the subject to delete
        String subject = subjectNametf.getText();
        //check that it is not Left empty
        if (!"".equals(subject)) {
            //get the existing items from database
            String SQLGet = "SELECT * FROM \"ExamTime\".subjects";
            String columnLabel = "subjectname";
            List<String> subjectList = (readFromDatabase.readDatabase(SQLGet, columnLabel));
            //check that subject is in the database
            if ((subjectList.contains(subject))) {
                //delete the subject from the database
                String SQL = String.format("DELETE FROM \"ExamTime\".subjects WHERE subjectname='%s';", subject);
                writeToDatabase(SQL);
                //reload the list 
                loadSubjectData();
                errorMessageLb.setText("Sucessfully deleted");
            } else {
                errorMessageLb.setText("That subject is not in the database");
            }
        } else {
            errorMessageLb.setText("Please enter a subject to delete");
        }
    }//GEN-LAST:event_deleteSubjectbtActionPerformed

    private void reloadBT1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadBT1ActionPerformed
        // TODO add your handling code here:
        loadExamData();
    }//GEN-LAST:event_reloadBT1ActionPerformed

    private void examSubjecttfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examSubjecttfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_examSubjecttfActionPerformed

    private void addExambtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExambtActionPerformed
        // TODO add your handling code here:
        //get the name of the new subject
        String examName = examNameft.getText();
        String examLength = examLengthtd.getText();
        String examSubject = examSubjecttf.getText();
        //check that it is not Left empty
        if (!("".equals(examName) || "".equals(examLength) || "".equals(examSubject))) {
            //get the existing items from database
            String SQL = "SELECT * FROM \"ExamTime\".exams";

            //get the names of the exams
            String columnLabel = "name";
            List<String> name = (readFromDatabase.readDatabase(SQL, columnLabel));
            //get the lenght of the exams
            String columnLabel1 = "length";
            List<String> length = (readFromDatabase.readDatabase(SQL, columnLabel1));
            //get the subject belonging to the exam
            String columnLabel2 = "subjectname";
            List<String> subject = (readFromDatabase.readDatabase(SQL, columnLabel2));

            //variable to make sure the item is not in the database
            Boolean contains = false;

            //loop through all items
            for (int i = 0; i < name.size(); i++) {
                //if there is a row which has all the same detials then the item is in the database
                if (name.get(i).equals(examName) && length.get(i).equals(examLength) 
                        && subject.get(i).equals(examSubject)) {
                    contains = true;
                    break;
                }
            }
            //if the item is not in the database add it 
            if (contains == false) {
                //write the exam to the database
                String SQLwrite = String.format(
                        "INSERT INTO \"ExamTime\".exams (\"name\", length, subjectname, examperiodid) VALUES ('%s',%d, '%s', %s);",
                        examName, Integer.valueOf(examLength), examSubject, examSeriesId);
                writeToDatabase(SQLwrite);
                //reload the list 
                loadExamData();
                infoLabel.setText("Sucessfully added");
            } else {
                infoLabel.setText("That exam is already in the database");
            }
        } else {
            infoLabel.setText("Please enter a exam to add");
        }
    }//GEN-LAST:event_addExambtActionPerformed

    private void deleteExambtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteExambtActionPerformed

        //get the details of the exam to delete
        String examName = examNameft.getText();
        String examLength = examLengthtd.getText();
        String examSubject = examSubjecttf.getText();
        //check that non of the boxes are not Left empty
        if (!("".equals(examName) || "".equals(examLength) || "".equals(examSubject))) {
            //get the existing items from database
            String SQL = String.format("SELECT * FROM \"ExamTime\".exams WHERE examperiodid = %s", examSeriesId);

            //get the names of the exams
            String columnLabel = "name";
            List<String> name = (readFromDatabase.readDatabase(SQL, columnLabel));
            //get the lenght of the exams
            String columnLabel1 = "length";
            List<String> length = (readFromDatabase.readDatabase(SQL, columnLabel1));
            //get the subject belonging to the exam
            String columnLabel2 = "subjectname";
            List<String> subject = (readFromDatabase.readDatabase(SQL, columnLabel2));

            //variable to make sure the item is in the database
            Boolean contains = false;

            //loop through all items
            for (int i = 0; i < name.size(); i++) {
                if (name.get(i).equals(examName) && length.get(i).equals(examLength) 
                        && subject.get(i).equals(examSubject)) {
                    contains = true;
                    break;
                }
            }
            //if the exam is in the database
            if (contains == true) {
                //delete the subject from the database
                String SQLwrite = String.format("DELETE FROM \"ExamTime\".exams WHERE name='%s' AND subjectname='%s' and examperiodid = %s;", 
                        examName, examSubject, examSeriesId);
                writeToDatabase(SQLwrite);
                //reload the list 
                loadExamData();
                infoLabel.setText("Sucessfully deleted");
            } else {
                infoLabel.setText("That exam is not in the database");
            }
        } else {
            infoLabel.setText("Please enter an exam to delete");
        }
    }//GEN-LAST:event_deleteExambtActionPerformed

    private void jScrollPane5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane5MouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jScrollPane5MouseClicked

    private void examTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examTableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String name = (String) source.getModel().getValueAt(row, 0);
        String length = (String) source.getModel().getValueAt(row, 1);
        String subject = (String) source.getModel().getValueAt(row, 2);
        //change the contense of the text fields accordingly
        examNameft.setText(name);
        examLengthtd.setText(length);
        examSubjecttf.setText(subject);
    }//GEN-LAST:event_examTableMouseClicked

    private Boolean checkInteger(String string) {
        if (string == null) {
            return false;
        }
        try {
            Integer i = Integer.parseInt(string);

        } catch (NumberFormatException nfe) {
            //not valid show warning message
            JOptionPane.showMessageDialog(null,
                    "Please make sure numbers are integer values",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    private void addExambt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExambt1ActionPerformed
        // TODO add your handling code here:
        //get the details of the room out of the text fields
        String name = roomNameft1.getText();
        String invigulators = roomInvigulatorstf.getText();
        String capacity = roomCapacitytf.getText();

        //check that non of them have been left blank
        if (!"".equals(name) && !"".equals(invigulators) && !"".equals(capacity) 
                && checkInteger(invigulators) && checkInteger(capacity)) {
            //get the existing items from database
            String SQLGet = String.format("SELECT * FROM \"ExamTime\".rooms WHERE examperiodid = %s;", examSeriesId);
            String columnLabel = "roomname";
            List<String> subjectList = (readFromDatabase.readDatabase(SQLGet, columnLabel));
            //check that the new subject is not already in the database
            if (!(subjectList.contains(name))) {
                //write the room to the database
                String SQL = String.format(
              "INSERT INTO \"ExamTime\".rooms (capacity, numinvigulatorsrequired, \"roomname\", examperiodid) VALUES (%d, %d, '%s', %s);",
                Integer.valueOf(capacity), Integer.valueOf(invigulators), name, examSeriesId);
                writeToDatabase(SQL);
                //reload the list 
                loadRoomData();
                infoLabelroom.setText("Sucessfully added");
            } else {
                infoLabelroom.setText("That room is already in the database");
            }
        } else {
            infoLabelroom.setText("Please enter a room to add");
        }
    }//GEN-LAST:event_addExambt1ActionPerformed

    private void reloadBTroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadBTroomActionPerformed
        // TODO add your handling code here:
        loadRoomData();
    }//GEN-LAST:event_reloadBTroomActionPerformed

    private void roomTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomTableMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String name = (String) source.getModel().getValueAt(row, 0);
        String capacity = (String) source.getModel().getValueAt(row, 1);
        String invigulators = (String) source.getModel().getValueAt(row, 2);
        //change the contense of the text fields accordingly
        roomCapacitytf.setText(capacity);
        roomInvigulatorstf.setText(invigulators);
        roomNameft1.setText(name);
    }//GEN-LAST:event_roomTableMouseClicked

    private void jScrollPane6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane6MouseClicked

    private void roomInvigulatorstfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomInvigulatorstfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomInvigulatorstfActionPerformed

    private void deleteExambt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteExambt1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //get the name of the subject to delete

        String name = roomNameft1.getText();
        String invigulators = roomInvigulatorstf.getText();
        String capacity = roomCapacitytf.getText();

        //check that it is not Left empty
        if (!"".equals(name) && !"".equals(invigulators) && !"".equals(capacity)) {
            //get the existing items from database
            String SQLGet = "SELECT * FROM \"ExamTime\".rooms";
            String columnLabel = "roomname";
            List<String> nameList = (readFromDatabase.readDatabase(SQLGet, columnLabel));
            //check that subject is in the database
            if ((nameList.contains(name))) {
                //delete the room from the database
                String SQL = String.format("DELETE FROM \"ExamTime\".rooms WHERE roomname='%s' and examperiodid=%s;", 
                        name, examSeriesId);
                writeToDatabase(SQL);
                //reload the list 
                loadRoomData();
                infoLabelroom.setText("Sucessfully deleted");
            } else {
                infoLabelroom.setText("That room is not in the database");
            }
        } else {
            infoLabelroom.setText("Please enter a room to delete");
        }

    }//GEN-LAST:event_deleteExambt1ActionPerformed

    private void roomPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_roomPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPanelComponentAdded

    private void examTimetableMainScreenbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examTimetableMainScreenbtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(InputDataPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_examTimetableMainScreenbtActionPerformed

    private void invigulationtimetablemainscreenbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invigulationtimetablemainscreenbtActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(invigulationTimetablePn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_invigulationtimetablemainscreenbtActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(manageStaffPn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(manageStudentsPn);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void staffbt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffbt1ActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(HomeScreen);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_staffbt1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String examseries = examseriestf.getText();
        //get the exam periods belonging to the school
        String SQL = String.format("SELECT * FROM \"ExamTime\".examperiod  WHERE schoolid = '%s';", schoolid);
        List<String> examseriesid = (readFromDatabase.readDatabase(SQL, "examperiodid"));
        //see if it is valid
        if (examseriesid.contains(examseries)) {
            //the exam series is valid
            examSeriesId = examseries;
            examTimetableMainScreenbt.setEnabled(true);
            examTimetablingBt.setEnabled(true);
            invigulationtimetablemainscreenbt.setEnabled(true);
            invigulationTimetableBt.setEnabled(true);
            printTimetablesBt.setEnabled(true);
        } else {
            //not valid show warning message
            JOptionPane.showMessageDialog(null,
                    "Examperiod not valid",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            examTimetableMainScreenbt.setEnabled(false);
            examTimetablingBt.setEnabled(false);
            invigulationtimetablemainscreenbt.setEnabled(false);
            invigulationTimetableBt.setEnabled(false);
            printTimetablesBt.setEnabled(false);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String input = (String) JOptionPane.showInputDialog(this,
                "Enter the name of the exam series to create: ",
                "NEW EXAM PERIOD",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                null);
        String SQL = String.format("INSERT INTO \"ExamTime\".examperiod(\"name\", schoolid) VALUES('%s', '%s');",
                input, schoolid);
        writeToDatabase(SQL);
        loadExamSeries();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void reloadStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadStudentsActionPerformed
        // TODO add your handling code here:
        loadStudents();
    }//GEN-LAST:event_reloadStudentsActionPerformed

    private void manageStudentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageStudentsTableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String studentid = (String) source.getModel().getValueAt(row, 0);
        String firstname = (String) source.getModel().getValueAt(row, 1);
        String lastname = (String) source.getModel().getValueAt(row, 2);
        String password = (String) source.getModel().getValueAt(row, 3);
        String username = (String) source.getModel().getValueAt(row, 4);
        //change the contense of the text fields accordingly
        firstNameStudent.setText(firstname);
        lastNameStudent.setText(lastname);
        passwordStudent.setText(password);
        usernameStudent.setText(username);
        studentId.setText(studentid);

        loadSubjectsForStudent();
        loadExamPeriodForStudent();
    }//GEN-LAST:event_manageStudentsTableMouseClicked

    private void deleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentActionPerformed
        // TODO add your handling code here:
        String firstname = firstNameStudent.getText();
        String lastname = lastNameStudent.getText();
        String password = passwordStudent.getText();
        String username = usernameStudent.getText();
        String studentid = studentId.getText();

        //check that non have been left blank 
        //not(if any of them are left blank )
        if (!(studentid.equals("") || firstname.equals("") || lastname.equals("") || 
                username.equals("") || password.equals(""))) {
            //non of the boxes were left blank
            //check it exists in the database for this school

            String SQL = String.format(
                    "SELECT * FROM \"ExamTime\".students WHERE schoolid='%s' and username = '%s';", schoolid, username);
            List<String> idList = (readFromDatabase.readDatabase(SQL, "studentid"));
            List<String> usernameList = (readFromDatabase.readDatabase(SQL, "username"));
            if (usernameList.contains(username)) {
                //make sure that the user wants to delete 
                int confirm = JOptionPane.showConfirmDialog(AdminHomeScreen, "Are you sure you would like to delete");
                if ((confirm == JOptionPane.YES_OPTION)) {
                    //the user does want to delete
                    //check that the username is correct for the password
                    if ((idList.get(0).equals(studentid)) && usernameList.get(0).equals(username)) {
                        String SQLDelete = String.format(
                                "DELETE FROM \"ExamTime\".students WHERE schoolid='%s' and username = '%s';", schoolid, username);
                        writeToDatabase(SQLDelete);
                        //reload the list 
                        loadStudents();
                        JOptionPane.showMessageDialog(null,
                                "Student deleted",
                                "INFOMATION",
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Student not in the database",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter a student to delete",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_deleteStudentActionPerformed

    private void editStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStudentActionPerformed
        // TODO add your handling code here:
        String firstname = firstNameStudent.getText();
        String lastname = lastNameStudent.getText();
        String password = passwordStudent.getText();
        String username = usernameStudent.getText();
        String studentid = studentId.getText();

        //make sure nothing is empty
        if (!(studentid.equals("") || firstname.equals("") || lastname.equals("")
                || username.equals("") || password.equals(""))) {
            //check that the user exists
            String SQLcheck = String.format("SELECT * FROM \"ExamTime\".students WHERE schoolid='%s' and studentid = '%s';", 
                    schoolid, studentid);
            List<String> idList = (readFromDatabase.readDatabase(SQLcheck, "studentid"));

            if (!idList.isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(AdminHomeScreen, "Are you sure you would like to edit this student");
                if (confirm == JOptionPane.YES_OPTION) {
                    String SQL = String.format("UPDATE \"ExamTime\".students "
                            + "SET firstname='%s', lastname='%s', \"password\"='%s', schoolid='%s', username='%s' "
                            + "WHERE studentid=%s;", firstname, lastname, password, schoolid, username, studentid);
                    writeToDatabase(SQL);

                    JOptionPane.showMessageDialog(null,
                            "Student successfully updates",
                            "INFOMATION",
                            JOptionPane.INFORMATION_MESSAGE);
                    loadStudents();
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "That user does not exist for your school",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter all the students details",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_editStudentActionPerformed

    private void studentSubjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentSubjectTableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String subject = (String) source.getModel().getValueAt(row, 0);
        //change the contense of the text fields accordingly
        subjectTb.setText(subject);

    }//GEN-LAST:event_studentSubjectTableMouseClicked

    private void addStudentSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentSubjectActionPerformed
        // TODO add your handling code here:
        String subjectToAdd = subjectTb.getText();
        String studentid = studentId.getText();
        //check that they study the subject
        DefaultTableModel model = (DefaultTableModel) this.studentSubjectTable.getModel();
        int numRows = model.getRowCount();
        Boolean found = false;
        for (int i = 0; i < numRows; i++) {
            String temp = (String) model.getValueAt(i, 0);
            if (temp.equals(subjectToAdd)) {
                found = true;
            }
        }
        //if the subject is not already in their list
        if (!(found.equals(true))) {
            //check that the subject is in the database
            String SQLcheck = "SELECT * FROM \"ExamTime\".subjects";
            String columnLabel = "subjectname";
            List<String> subjectname = (readFromDatabase.readDatabase(SQLcheck, columnLabel));

            if (subjectname.contains(subjectToAdd)) {
                //insert the student into the studies table
                String SQL = String.format("INSERT INTO \"ExamTime\".studies (subjectname, studentid) VALUES('%s', %s);", 
                        subjectToAdd, studentid);
                writeToDatabase(SQL);
                loadSubjectsForStudent();
                JOptionPane.showMessageDialog(null,
                        "Student successfully updated",
                        "INFOMATION",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null,
                        "The subject is already in the list",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "The subject is not in the database",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addStudentSubjectActionPerformed

    private void deleteStudentSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentSubjectActionPerformed
        // TODO add your handling code here:
        String subjectToDelete = subjectTb.getText();
        String studentid = studentId.getText();
        //check that they study the subject
        DefaultTableModel model = (DefaultTableModel) this.studentSubjectTable.getModel();
        int numRows = model.getRowCount();
        Boolean found = false;
        for (int i = 0; i < numRows; i++) {
            String temp = (String) model.getValueAt(i, 0);
            if (temp.equals(subjectToDelete)) {
                found = true;
            }
        }
        //delete the instance in the studies
        if (found.equals(true)) {
            String SQL = String.format("DELETE FROM \"ExamTime\".studies WHERE studentid = %s and subjectname = '%s';", 
                    studentid, subjectToDelete);
            writeToDatabase(SQL);
            loadSubjectsForStudent();
            JOptionPane.showMessageDialog(null,
                    "Student's subjects deleted",
                    "INFOMATION",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "The subject is not in the list",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteStudentSubjectActionPerformed

    private void examPeriodtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examPeriodtableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String subject = (String) source.getModel().getValueAt(row, 0);
        //change the contense of the text fields accordingly
        examperiodTF.setText(subject);
    }//GEN-LAST:event_examPeriodtableMouseClicked

    private void addStudentExamPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentExamPeriodActionPerformed
        // TODO add your handling code here:
        //get the exam period to add
        String examPeriodtoadd = examperiodTF.getText();
        //get the student
        String studentid = studentId.getText();
        Boolean found = false;
        try {
            //check if they are already enrolled in the period
            DefaultTableModel model = (DefaultTableModel) this.examPeriodtable.getModel();
            int numRows = model.getRowCount();

            for (int i = 0; i < numRows; i++) {
                String temp = (String) model.getValueAt(i, 0);
                if (temp.equals(examPeriodtoadd)) {
                    found = true;
                }
            }
        } catch (Exception e) {
            found = false;
        }

        //if the examperiod is not already in their list
        if (!(found.equals(true))) {
            //check that the subject is in the database
            String SQLcheck = String.format("SELECT * FROM \"ExamTime\".examperiod WHERE schoolid = '%s'", schoolid);
            String columnLabel = "examperiodid";
            List<String> examperiodids = (readFromDatabase.readDatabase(SQLcheck, columnLabel));

            if (examperiodids.contains(examPeriodtoadd)) {
                //insert the student into the studies table
                String SQL = String.format("INSERT INTO \"ExamTime\".sitting (examperiodid, studentid) VALUES('%s', %s);",
                        examPeriodtoadd, studentid);
                writeToDatabase(SQL);
                loadExamPeriodForStudent();
                JOptionPane.showMessageDialog(null,
                        "Examperiod added",
                        "INFOMATION",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null,
                        "That examperiod is not registered or is not assicated with you school",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "The student is already registered for that exam period",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addStudentExamPeriodActionPerformed

    private void deleteStudentExamPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentExamPeriodActionPerformed
        // TODO add your handling code here:
        //get the exam period to delete
        String examPeriodtodelete = examperiodTF.getText();
        String studentid = studentId.getText();

        //check that they study the subject
        DefaultTableModel model = (DefaultTableModel) this.examPeriodtable.getModel();
        int numRows = model.getRowCount();
        Boolean found = false;
        for (int i = 0; i < numRows; i++) {
            String temp = (String) model.getValueAt(i, 0);
            if (temp.equals(examPeriodtodelete)) {
                found = true;
            }
        }
        //delete the instance in the studies
        if (found.equals(true)) {
            String SQL = String.format("DELETE FROM \"ExamTime\".sitting WHERE examperiodid = %s and studentid = '%s';", 
                    examPeriodtodelete, studentid);
            writeToDatabase(SQL);
            loadExamPeriodForStudent();
            JOptionPane.showMessageDialog(null,
                    "The student has been deregistered for that examperiod",
                    "INFOMATION",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "The student is not registered for that examperiod",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteStudentExamPeriodActionPerformed

    private void reloadStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadStaffActionPerformed
        // TODO add your handling code here:
        loadStaff();
    }//GEN-LAST:event_reloadStaffActionPerformed

    private void staffTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffTableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String teacherid = (String) source.getModel().getValueAt(row, 0);
        String firstname = (String) source.getModel().getValueAt(row, 1);
        String lastname = (String) source.getModel().getValueAt(row, 2);
        String password = (String) source.getModel().getValueAt(row, 3);
        String username = (String) source.getModel().getValueAt(row, 4);
        String timetable = (String) source.getModel().getValueAt(row, 5);
        String daysworkingNumber = (String) source.getModel().getValueAt(row, 6);
        //change the contense of the text fields accordingly
        firstnameStaff.setText(firstname);
        lastnameStaff.setText(lastname);
        passwordStaff.setText(password);
        usernameStaff.setText(username);
        timetableStaff.setText(timetable);
        studentidStaff.setText(teacherid);
        daysworking.setText(daysworkingNumber);
    }//GEN-LAST:event_staffTableMouseClicked

    private void editStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStaffActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String firstname = firstnameStaff.getText();
        String lastname = lastnameStaff.getText();
        String password = passwordStaff.getText();
        String username = usernameStaff.getText();
        String teacherid = studentidStaff.getText();
        String timetable = timetableStaff.getText();
        String daysworkingNum = daysworking.getText();

        //make sure nothing is empty
        if (!(teacherid.equals("") || firstname.equals("") || lastname.equals("")
                || username.equals("") || password.equals("") || timetable.equals(""))) {

            //check that the teacher exists
            String SQLcheck = String.format("SELECT * FROM \"ExamTime\".teachers WHERE schoolid='%s' and teacherid = %s;",
                    schoolid, teacherid);
            List<String> idList = (readFromDatabase.readDatabase(SQLcheck, "teacherid"));

            //the user exists
            if (!idList.isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(
                        AdminHomeScreen, "Are you sure you would like to edit this teacher");
                if (confirm == JOptionPane.YES_OPTION) {
                    String SQL = String.format("UPDATE \"ExamTime\".teachers "
                            + "SET firstname='%s', lastname='%s', \"password\"='%s', username='%s', timetable='%s', daysworking=%s "
                            + "WHERE teacherid=%s;", firstname, lastname, password, username, timetable, 
                            daysworkingNum, teacherid);
                    writeToDatabase(SQL);

                    JOptionPane.showMessageDialog(null,
                            "Teacher successfully updates",
                            "INFOMATION",
                            JOptionPane.INFORMATION_MESSAGE);
                    loadStaff();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter all the teachers details",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editStaffActionPerformed

    private void deleteStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStaffActionPerformed
        String firstname = firstnameStaff.getText();
        String lastname = lastnameStaff.getText();
        String password = passwordStaff.getText();
        String username = usernameStaff.getText();
        String teacherid = studentidStaff.getText();
        String timetable = timetableStaff.getText();

        //check that non of the important boxes have been left blank 
        //not(if any of them are left blank )
        if (!(teacherid.equals("") || firstname.equals("") || lastname.equals("") || 
                username.equals(""))) {
            //non of the important boxes were left blank
            //check it exists in the database for this school

            String SQL = String.format("SELECT * FROM \"ExamTime\".teachers WHERE teacherid='%s' and username = '%s';", 
                    teacherid, username);
            List<String> idList = (readFromDatabase.readDatabase(SQL, "teacherid"));
            List<String> usernameList = (readFromDatabase.readDatabase(SQL, "username"));

            //make sure that the user wants to delete 
            int confirm = JOptionPane.showConfirmDialog(AdminHomeScreen, "Are you sure you would like to delete this teacher?");
            if ((confirm == JOptionPane.YES_OPTION)) {
                //the user does want to delete
                //check that the username is correct for the id
                if ((idList.get(0).equals(teacherid)) && usernameList.get(0).equals(username)) {
                    String SQLDelete = String.format("DELETE FROM \"ExamTime\".teachers WHERE schoolid='%s' and username = '%s';",
                            schoolid, username);
                    writeToDatabase(SQLDelete);
                    //reload the list 
                    loadStaff();
                    JOptionPane.showMessageDialog(null,
                            "Teacher deleted",
                            "INFOMATION",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Teacher not in the database",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter a teacher to delete",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_deleteStaffActionPerformed

    private void schoolPeriodBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schoolPeriodBtActionPerformed
        // TODO add your handling code here:
        inputDataPanelMain.removeAll();
        inputDataPanelMain.add(schoolPeriodPanel);
        inputDataPanelMain.repaint();
        inputDataPanelMain.revalidate();
    }//GEN-LAST:event_schoolPeriodBtActionPerformed

    private void timeslotBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeslotBtActionPerformed
        // TODO add your handling code here:
        inputDataPanelMain.removeAll();
        inputDataPanelMain.add(timeslotPanel);
        inputDataPanelMain.repaint();
        inputDataPanelMain.revalidate();
    }//GEN-LAST:event_timeslotBtActionPerformed

    private void addSchoolPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSchoolPeriodActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //get the name of the new subject
        String starttime = startTime.getText();
        String endtime = endTime.getText();
        String lengt = length.getText();
        String dayOfWeek = DayOfWeek.getText();
        //check that it is not Left empty
        if (!("".equals(starttime) || "".equals(endtime) || "".equals(lengt) 
                || "".equals(dayOfWeek)) && checkInteger(lengt)) {
            //check that the end time is after the start time

            try {
                //get the start and end times
                LocalTime start = (LocalTime.parse(starttime));
                LocalTime end = (LocalTime.parse(endtime));

                //formater for the times
                DateTimeFormatter formater = DateTimeFormatter.ofPattern("HH:mm:ss");

                //format the start and end times
                String startFormated = start.format(formater);
                String endFormated = end.format(formater);

                //format the dayofthe week - capitalise the first letter
                String formatedDayOfWeek = dayOfWeek.substring(0, 1).toUpperCase() + 
                        dayOfWeek.substring(1).toLowerCase();

                //get the existing items from database
                String SQL = String.format("SELECT schoolperiodsid FROM \"ExamTime\".schoolperiods WHERE starttime = '%s' and "
                        + "endtime = '%s' and length = '%s' and dayofweek = '%s' and schoolid='%s';",
                        startFormated, endFormated, lengt, formatedDayOfWeek, schoolid);

                //get the names of the exams
                List<String> id = (readFromDatabase.readDatabase(SQL, "schoolperiodsid"));

                //check that the item is not already in the database -> the list of the id's is empty
                if (id.isEmpty() && start.isBefore(end)) {
                    //if the item is not in the database add it 

                    //write the exam to the database
                    String SQLwrite = String.format("INSERT INTO \"ExamTime\".schoolperiods "
                            + "(starttime, endtime, length, dayofweek, schoolid) "
                            + "VALUES('%s', '%s', %s, '%s', '%s');",
                            startFormated, endFormated, lengt, dayOfWeek, schoolid);
                    writeToDatabase(SQLwrite);

                    //reload the list 
                    loadSchoolPeriod();

                    //confirmation message to user
                    JOptionPane.showMessageDialog(null,
                            "School period successfully added",
                            "UPDATE",
                            JOptionPane.INFORMATION_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(null,
                            "School Period already added or details are incorrect",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null,
                        "Please make sure your date is in the correct format"
                        + " HH:mm:ss",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter the school period you would like to add",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addSchoolPeriodActionPerformed

    private void reloadSchoolPeriodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadSchoolPeriodsActionPerformed
        // TODO add your handling code here:
        loadSchoolPeriod();
    }//GEN-LAST:event_reloadSchoolPeriodsActionPerformed

    private void schoolPeriodExamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schoolPeriodExamMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String starttime = (String) source.getModel().getValueAt(row, 1);
        String endtime = (String) source.getModel().getValueAt(row, 2);
        String lengt = (String) source.getModel().getValueAt(row, 3);
        String dayofweek = (String) source.getModel().getValueAt(row, 4);
        //change the contense of the text fields accordingly
        startTime.setText(starttime);
        endTime.setText(endtime);
        length.setText(lengt);
        DayOfWeek.setText(dayofweek);
    }//GEN-LAST:event_schoolPeriodExamMouseClicked

    private void jScrollPane10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane10MouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jScrollPane10MouseClicked

    private void lengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lengthActionPerformed

    private void deleteSchoolPeiodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSchoolPeiodActionPerformed
        // TODO add your handling code here:
        //get the name of the school period to delete
        String starttime = startTime.getText();
        String endtime = endTime.getText();
        String lengt = length.getText();
        String dayOfWeek = DayOfWeek.getText();
        //check that it is not Left empty
        if (!("".equals(starttime) || "".equals(endtime) || "".equals(lengt) || "".equals(dayOfWeek))) {

            try {
                //get the start and end times
                LocalTime start = (LocalTime.parse(starttime));
                LocalTime end = (LocalTime.parse(endtime));

                //formater for the times
                DateTimeFormatter formater = DateTimeFormatter.ofPattern("HH:mm:ss");

                //format the start and end times
                String startFormated = start.format(formater);
                String endFormated = end.format(formater);

                //format the dayofthe week - capitalise the first letter
                String formatedDayOfWeek = dayOfWeek.substring(0, 1).toUpperCase() + 
                        dayOfWeek.substring(1).toLowerCase();

                //check that the item exists in the database
                String SQL = String.format("SELECT schoolperiodsid FROM \"ExamTime\".schoolperiods WHERE starttime = '%s' and "
                        + "endtime = '%s' and length = '%s' and dayofweek = '%s' and schoolid='%s';",
                        startFormated, endFormated, lengt, formatedDayOfWeek, schoolid);

                //get the names of the exams
                List<String> id = (readFromDatabase.readDatabase(SQL, "schoolperiodsid"));

                Boolean contains = false;
                //if an item was returned then it is already in the database
                if (!id.isEmpty()) {
                    contains = true;
                }

                //there is an item to be deleted
                if (contains == true) {
                    //delete  the school period from to the database
                    String SQLwrite = String.format("DELETE FROM \"ExamTime\".schoolperiods "
                            + "WHERE starttime = '%s' and endtime='%s' and length=%s and dayofweek='%s' and schoolid ='%s';",
                            startFormated, endFormated, lengt, dayOfWeek, schoolid);
                    writeToDatabase(SQLwrite);
                    //reload the list 
                    loadSchoolPeriod();
                    JOptionPane.showMessageDialog(null,
                            "School period successfully deleted",
                            "UPDATE",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null,
                            "The school period is not in the database",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null,
                        "Please make sure your date is in the correct format"
                        + " HH:mm:ss",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter the school period you would like to delete",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteSchoolPeiodActionPerformed

    private void schoolPeriodPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_schoolPeriodPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_schoolPeriodPanelComponentAdded

    private void addtimeslotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtimeslotActionPerformed
        // TODO add your handling code here:
        //get the name of the new subject
        String starttime = starttimetf.getText();
        String endtime = endtimetf.getText();
        String lengthOfTiemslot = lengthtf.getText();
        String dateUserInput = datetf.getText();
        //check that it is not Left empty
        if (!("".equals(starttime) || "".equals(endtime) || "".equals(lengthOfTiemslot) 
                || "".equals(dateUserInput)) && checkInteger(lengthOfTiemslot)) {
            //check that the end time is after the start time

            try {
                //get the start and end times
                LocalTime start = (LocalTime.parse(starttime));
                LocalTime end = (LocalTime.parse(endtime));
                //get the date in the date format
                LocalDate date = (LocalDate.parse(dateUserInput));

                //formater for the times
                DateTimeFormatter formater = DateTimeFormatter.ofPattern("HH:mm:ss");
                DateTimeFormatter formaterDate = DateTimeFormatter.ofPattern("yyy-MM-dd");

                //format the start and end times
                String startFormated = start.format(formater);
                String endFormated = end.format(formater);
                String dateFormated = date.format(formaterDate);

                //get the existing items from database
                String SQL = String.format(
                        "SELECT timeslotid FROM \"ExamTime\".timeslots WHERE starttime = '%s' AND endtime = '%s' AND date = '%s' AND length = '%s' "
                        + "AND examperiodid ='%s';",
                        startFormated, endFormated, dateFormated, lengthOfTiemslot, examSeriesId);

                //get the names of the exams
                List<String> id = (readFromDatabase.readDatabase(SQL, "timeslotid"));

                //check that the item is not already in the database -> the list of the id's is empty
                if (id.isEmpty() && start.isBefore(end)) {
                    //if the item is not in the database add it 

                    //write the exam to the database
                    String SQLwrite = String.format("INSERT INTO \"ExamTime\".timeslots "
                            + "(starttime, endtime, date, length, examperiodid) "
                            + "VALUES('%s', '%s', '%s', %s, %s);",
                            startFormated, endFormated, dateFormated, lengthOfTiemslot, examSeriesId);
                    writeToDatabase(SQLwrite);

                    //reload the list 
                    loadTimeslots();

                    //confirmation message to user
                    JOptionPane.showMessageDialog(null,
                            "Timeslot successfully added",
                            "UPDATE",
                            JOptionPane.INFORMATION_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(null,
                            "Timesot already added or details are incorrect",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null,
                        "Please make sure your date and times are in the correct format"
                        + " HH:mm:ss/ YYYY-MM-DD",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter the timesot you would like to add",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addtimeslotActionPerformed

    private void reloadBT3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadBT3ActionPerformed
        // TODO add your handling code here:
        loadTimeslots();
    }//GEN-LAST:event_reloadBT3ActionPerformed

    private void timeslotstableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeslotstableMouseClicked
        // TODO add your handling code here:
        //the table which is clicked
        JTable source = (JTable) evt.getSource();
        //the row which ic clicked
        int row = source.rowAtPoint(evt.getPoint());
        //get the value of each collumn for the row
        String starttime = (String) source.getModel().getValueAt(row, 1);
        String endtime = (String) source.getModel().getValueAt(row, 2);
        String lengt = (String) source.getModel().getValueAt(row, 3);
        String date = (String) source.getModel().getValueAt(row, 4);
        //change the contense of the text fields accordingly
        starttimetf.setText(starttime);
        endtimetf.setText(endtime);
        lengthtf.setText(lengt);
        datetf.setText(date);
    }//GEN-LAST:event_timeslotstableMouseClicked

    private void scrollpanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollpanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_scrollpanelMouseClicked

    private void datetfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datetfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datetfActionPerformed

    private void deletetiomeslotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletetiomeslotActionPerformed
        // TODO add your handling code here:
        String starttime = starttimetf.getText();
        String endtime = endtimetf.getText();
        String lengthOfTiemslot = lengthtf.getText();
        String dateUserInput = datetf.getText();
        //check that it is not Left empty
        if (!("".equals(starttime) || "".equals(endtime) || "".equals(lengthOfTiemslot) || "".equals(dateUserInput))) {

            try {
                //get the start and end times
                LocalTime start = (LocalTime.parse(starttime));
                LocalTime end = (LocalTime.parse(endtime));

                //formater for the times
                DateTimeFormatter formater = DateTimeFormatter.ofPattern("HH:mm:ss");

                //format the start and end times
                String startFormated = start.format(formater);
                String endFormated = end.format(formater);

                //get the date in the date format
                LocalDate date = (LocalDate.parse(dateUserInput));
                DateTimeFormatter formaterDate = DateTimeFormatter.ofPattern("yyy-MM-dd");
                String dateFormated = date.format(formaterDate);

                //get the existing items from database
                String SQL = String.format(
                        "SELECT timeslotid FROM \"ExamTime\".timeslots WHERE starttime = '%s' AND endtime = '%s' AND date = '%s' AND length = '%s' "
                        + "AND examperiodid ='%s';",
                        startFormated, endFormated, dateFormated, lengthOfTiemslot, examSeriesId);

                //get the names of the exams
                List<String> id = (readFromDatabase.readDatabase(SQL, "timeslotid"));

                Boolean contains = false;
                //if an item was returned then it is already in the database
                if (!id.isEmpty()) {
                    contains = true;
                }

                //there is an item to be deleted
                if (contains == true) {
                    //delete  the school period from to the database
                    String SQLwrite = String.format("DELETE FROM \"ExamTime\".timeslots "
                            + "WHERE starttime = '%s' AND endtime = '%s' AND date = '%s' AND length = '%s' AND examperiodid ='%s';;",
                            startFormated, endFormated, dateFormated, lengthOfTiemslot, examSeriesId);

                    writeToDatabase(SQLwrite);
                    //reload the list 
                    loadTimeslots();
                    JOptionPane.showMessageDialog(null,
                            "Timeslot successfully deleted",
                            "UPDATE",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null,
                            "The timeslot is not in the database",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null,
                        "Please make sure your date is in the correct format"
                        + " HH:mm:ss / yyyy:MM:dd",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please enter the timeslot you would like to delete",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deletetiomeslotActionPerformed

    private void timeslotPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_timeslotPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_timeslotPanelComponentAdded

    private void subjectNametfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectNametfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectNametfActionPerformed

    private void DayOfWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayOfWeekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DayOfWeekActionPerformed

    private void lengthtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lengthtfActionPerformed

    private void invigulationtimetablefilenmaeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invigulationtimetablefilenmaeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invigulationtimetablefilenmaeActionPerformed

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        // TODO add your handling code here:

        //check that noting has been left empty
        if ((examtimetablefilename.getText().equals("")) || (invigulationtimetablefilenmae.getText().equals(""))
                || (lengthexamtimetable.getText().equals("")) || (invigulationsolving.getText().equals(""))) {

            //get the values from the variables and send them to the public variables
            //simething is empty ->  notify the users
            JOptionPane.showMessageDialog(null,
                    "Please enter all details",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            pathExam = examtimetablefilename.getText();
            pathInvigulation = invigulationtimetablefilenmae.getText();
            durationExam = Integer.valueOf(lengthexamtimetable.getText());
            durationInviuglation = Integer.valueOf(invigulationsolving.getText());
            percentageInvigulation = Float.parseFloat(percentageInvigulating.getText());

            try {
                JOptionPane.showMessageDialog(null,
                        "Your timetable is being generate please wait for confirmation it has finished before closing",
                        "Complete",
                        JOptionPane.INFORMATION_MESSAGE);
                //run the invigulation timetable function
                InvigulationTimetablingApp.main();
                JOptionPane.showMessageDialog(null,
                        "Timetables have been generated. Please check your folder for the files.",
                        "COMPLETE",
                        JOptionPane.WARNING_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(AdminHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,
                        ex,
                        "ERROR",
                        JOptionPane.WARNING_MESSAGE);

            }
        }

    }//GEN-LAST:event_solveButtonActionPerformed

    private void roomCapacitytfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCapacitytfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomCapacitytfActionPerformed

    private void examtimetablefilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examtimetablefilenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_examtimetablefilenameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton2ActionPerformed

    private void printTimetablesBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTimetablesBtActionPerformed
        print();


    }//GEN-LAST:event_printTimetablesBtActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminHomeScreen;
    private javax.swing.JTextField DayOfWeek;
    private javax.swing.JPanel HomeScreen;
    private javax.swing.JPanel InputDataPanel;
    private javax.swing.JButton Subjectsbt;
    private javax.swing.JPanel ViewExamTimetable;
    private javax.swing.JButton addExambt;
    private javax.swing.JButton addExambt1;
    private javax.swing.JButton addSchoolPeriod;
    private javax.swing.JButton addStudentExamPeriod;
    private javax.swing.JButton addStudentSubject;
    private javax.swing.JButton addSubjectbt;
    private javax.swing.JButton addtimeslot;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField datetf;
    private javax.swing.JTextField daysworking;
    private javax.swing.JButton deleteExambt;
    private javax.swing.JButton deleteExambt1;
    private javax.swing.JButton deleteSchoolPeiod;
    private javax.swing.JButton deleteStaff;
    private javax.swing.JButton deleteStudent;
    private javax.swing.JButton deleteStudentExamPeriod;
    private javax.swing.JButton deleteStudentSubject;
    private javax.swing.JButton deleteSubjectbt;
    private javax.swing.JButton deletetiomeslot;
    private javax.swing.JButton editStaff;
    private javax.swing.JButton editStudent;
    private javax.swing.JTextField endTime;
    private javax.swing.JTextField endtimetf;
    private javax.swing.JLabel errorMessageLb;
    private javax.swing.JTextField examLengthtd;
    private javax.swing.JTextField examNameft;
    private javax.swing.JButton examPage;
    private javax.swing.JPanel examPanel;
    private javax.swing.JTable examPeriodtable;
    private javax.swing.JTable examSeriesTable;
    private javax.swing.JTextField examSubjecttf;
    private javax.swing.JTable examTable;
    private javax.swing.JButton examTimetableMainScreenbt;
    private javax.swing.JButton examTimetablingBt;
    private javax.swing.JTextField examperiodTF;
    private javax.swing.JTextField examseriestf;
    private javax.swing.JTable examtimetable;
    private javax.swing.JTextField examtimetablefilename;
    private javax.swing.JTextField firstNameStudent;
    private javax.swing.JTextField firstnameStaff;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel infoLabel2;
    private javax.swing.JLabel infoLabelroom;
    private javax.swing.JLabel infolabelSchoolPeriod;
    private javax.swing.JPanel inputDataPanelMain;
    private javax.swing.JButton invigulationTimetableBt;
    private javax.swing.JPanel invigulationTimetablePn;
    private javax.swing.JTextField invigulationsolving;
    private javax.swing.JTextField invigulationtimetablefilenmae;
    private javax.swing.JButton invigulationtimetablemainscreenbt;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField lastNameStudent;
    private javax.swing.JTextField lastnameStaff;
    private javax.swing.JTextField length;
    private javax.swing.JTextField lengthexamtimetable;
    private javax.swing.JTextField lengthtf;
    private javax.swing.JPanel manageStaffPn;
    private javax.swing.JPanel manageStudentsPn;
    private javax.swing.JTable manageStudentsTable;
    private javax.swing.JLabel managestudentstitle;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JTextField passwordStaff;
    private javax.swing.JTextField passwordStudent;
    private javax.swing.JTextField percentageInvigulating;
    private javax.swing.JLabel personalLabel;
    private javax.swing.JButton printTimetablesBt;
    private javax.swing.JButton reloadBT;
    private javax.swing.JButton reloadBT1;
    private javax.swing.JButton reloadBT3;
    private javax.swing.JButton reloadBTroom;
    private javax.swing.JButton reloadSchoolPeriods;
    private javax.swing.JButton reloadStaff;
    private javax.swing.JButton reloadStudents;
    private javax.swing.JTextField roomCapacitytf;
    private javax.swing.JTextField roomInvigulatorstf;
    private javax.swing.JTextField roomNameft1;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JTable roomTable;
    private javax.swing.JButton schoolPeriodBt;
    private javax.swing.JTable schoolPeriodExam;
    private javax.swing.JPanel schoolPeriodPanel;
    private javax.swing.JScrollPane scrollpanel;
    private javax.swing.JPanel sidePanel1;
    private javax.swing.JPanel sidePanel4;
    private javax.swing.JButton signOut;
    private javax.swing.JButton solveButton;
    private javax.swing.JTable staffTable;
    private javax.swing.JButton staffbt;
    private javax.swing.JButton staffbt1;
    private javax.swing.JButton staffbt3;
    private javax.swing.JTextField startTime;
    private javax.swing.JTextField starttimetf;
    private javax.swing.JPanel studentDisplayPanel;
    private javax.swing.JTextField studentId;
    private javax.swing.JTable studentSubjectTable;
    private javax.swing.JTextField studentidStaff;
    private javax.swing.JButton studentsBt;
    private javax.swing.JTextField subjectNametf;
    private javax.swing.JPanel subjectPanel;
    private javax.swing.JScrollPane subjectTA;
    private javax.swing.JTextField subjectTb;
    private javax.swing.JTextArea subjectnameta;
    private javax.swing.JButton timeslotBt;
    private javax.swing.JPanel timeslotPanel;
    private javax.swing.JTable timeslotstable;
    private javax.swing.JTextField timetableStaff;
    private javax.swing.JPanel topBar;
    private javax.swing.JTextField usernameStaff;
    private javax.swing.JTextField usernameStudent;
    // End of variables declaration//GEN-END:variables

    private void loadSubjectData() {
        //get the data from the database
        subjectnameta.setText("");
        String SQL = "SELECT * FROM \"ExamTime\".subjects";
        String columnLabel = "subjectname";
        List<String> subjectname = (readFromDatabase.readDatabase(SQL, columnLabel));
        for (String name : subjectname) {
            subjectnameta.append(name + "\n");
        }
    }

    private void loadExamData() {
        //clear the table
        DefaultTableModel dtm = (DefaultTableModel) examTable.getModel();
        dtm.setRowCount(0);

        String SQL = String.format("SELECT * FROM \"ExamTime\".exams WHERE examperiodid=%s;", examSeriesId);

        //get the names of the exams
        String columnLabel = "name";
        List<String> name = (readFromDatabase.readDatabase(SQL, columnLabel));
        //get the lenght of the exams
        String columnLabel1 = "length";
        List<String> length = (readFromDatabase.readDatabase(SQL, columnLabel1));
        //get the subject belonging to the exam
        String columnLabel2 = "subjectname";
        List<String> subject = (readFromDatabase.readDatabase(SQL, columnLabel2));
        //create table model
        DefaultTableModel model = (DefaultTableModel) examTable.getModel();
        //add the items to the table
        for (int i = 0; i < name.size(); i++) {
            Object[] row = {name.get(i), length.get(i), subject.get(i)};
            model.addRow(row);
        }

    }

    private void loadRoomData() {
        //clear the table
        DefaultTableModel dtm = (DefaultTableModel) roomTable.getModel();
        dtm.setRowCount(0);

        String SQL = String.format("SELECT * FROM \"ExamTime\".rooms WHERE examperiodid=%s;", examSeriesId);

        //get the capacity
        String columnLabel = "capacity";
        List<String> capacity = (readFromDatabase.readDatabase(SQL, columnLabel));
        //get the numinvigulatorsrequired
        String columnLabel1 = "numinvigulatorsrequired";
        List<String> numinvigulatorsrequired = (readFromDatabase.readDatabase(SQL, columnLabel1));
        //get the name
        String columnLabel2 = "roomname";
        List<String> name = (readFromDatabase.readDatabase(SQL, columnLabel2));

        //create table model
        DefaultTableModel model = (DefaultTableModel) roomTable.getModel();
        //add the items to the table
        for (int i = 0; i < name.size(); i++) {
            Object[] row = {name.get(i), capacity.get(i), numinvigulatorsrequired.get(i)};
            model.addRow(row);
        }

    }

    private void loadExamSeries() {
        DefaultTableModel dtm = (DefaultTableModel) examSeriesTable.getModel();
        dtm.setRowCount(0);
        String SQL = String.format("SELECT * FROM \"ExamTime\".examperiod  WHERE schoolid = '%s';", schoolid);
        List<String> examseriesName = (readFromDatabase.readDatabase(SQL, "name"));
        List<String> examseriesid = (readFromDatabase.readDatabase(SQL, "examperiodid"));

        DefaultTableModel model = (DefaultTableModel) examSeriesTable.getModel();
        for (int i = 0; i < examseriesName.size(); i++) {
            Object[] row = {examseriesName.get(i), examseriesid.get(i)};
            model.addRow(row);
        }

    }

    private void personalise() {
        personalLabel.setText("Welcome: " + schoolid);
    }

    private void loadStudents() {
        //clear the table

        DefaultTableModel dtm = (DefaultTableModel) manageStudentsTable.getModel();
        dtm.setRowCount(0);

        String SQL = String.format("SELECT * FROM \"ExamTime\".students WHERE schoolid='%s';", schoolid);

        //get the names of the exams
        String columnLabel = "studentid";
        List<String> studentid = (readFromDatabase.readDatabase(SQL, columnLabel));
        //get the lenght of the exams
        String columnLabel1 = "firstname";
        List<String> firstname = (readFromDatabase.readDatabase(SQL, columnLabel1));
        //get the subject belonging to the exam
        String columnLabel2 = "lastname";
        List<String> lastname = (readFromDatabase.readDatabase(SQL, columnLabel2));
        String columnLabel3 = "password";
        List<String> password = (readFromDatabase.readDatabase(SQL, columnLabel3));
        String columnLabel4 = "username";
        List<String> username = (readFromDatabase.readDatabase(SQL, columnLabel4));
        //create table model
        DefaultTableModel table = (DefaultTableModel) this.manageStudentsTable.getModel();
        //add the items to the table
        for (int i = 0; i < studentid.size(); i++) {
            Object[] row = {studentid.get(i), firstname.get(i), lastname.get(i),
                password.get(i), username.get(i)};
            table.addRow(row);

        }
    }

    public void loadSubjectsForStudent() {
        DefaultTableModel model = (DefaultTableModel) this.studentSubjectTable.getModel();
        model.setNumRows(0);
        //get the students id from the textbox
        String studentid = studentId.getText();
        //read the list of subjects from the database
        String SQL = String.format("SELECT subjectname FROM \"ExamTime\".studies WHERE studentid =%s;", studentid);
        List<String> subjects = (readFromDatabase.readDatabase(SQL, "subjectname"));

        DefaultTableModel table = (DefaultTableModel) this.studentSubjectTable.getModel();
        for (String s : subjects) {
            Object[] row = {s};
            table.addRow(row);
        }

    }

    public void loadExamPeriodForStudent() {
        //clear the table 
        DefaultTableModel model = (DefaultTableModel) this.examPeriodtable.getModel();
        model.setNumRows(0);
        //get the students id
        String studentid = studentId.getText();
        //get the list of examperiods
        String SQL = String.format("SELECT examperiodid FROM \"ExamTime\".sitting where studentid = %s;", studentid);
        List<String> examperiods = readFromDatabase.readDatabase(SQL, "examperiodid");
        //iterate througha ll the exam periods and add them to the table
        for (String s : examperiods) {
            Object[] row = {s};
            model.addRow(row);
        }
    }

    public void loadStaff() {
        DefaultTableModel dtm = (DefaultTableModel) staffTable.getModel();
        dtm.setRowCount(0);

        String SQL = String.format("SELECT * FROM \"ExamTime\".teachers WHERE schoolid='%s' ORDER BY teacherid;", schoolid);

        //get the names of the exams
        String columnLabel = "teacherid";
        List<String> teacherid = (readFromDatabase.readDatabase(SQL, columnLabel));
        //get the lenght of the exams
        String columnLabel1 = "firstname";
        List<String> firstname = (readFromDatabase.readDatabase(SQL, columnLabel1));
        //get the subject belonging to the exam
        String columnLabel2 = "lastname";
        List<String> lastname = (readFromDatabase.readDatabase(SQL, columnLabel2));
        String columnLabel3 = "password";
        List<String> password = (readFromDatabase.readDatabase(SQL, columnLabel3));
        String columnLabel4 = "username";
        List<String> username = (readFromDatabase.readDatabase(SQL, columnLabel4));
        String columnLabel5 = "timetable";
        List<String> timetable = (readFromDatabase.readDatabase(SQL, columnLabel5));
        String columnLabel6 = "daysworking";
        List<String> daysworkingList = (readFromDatabase.readDatabase(SQL, columnLabel6));
        //create table model
        DefaultTableModel table = (DefaultTableModel) this.staffTable.getModel();
        //add the items to the table
        for (int i = 0; i < teacherid.size(); i++) {
            Object[] row = {teacherid.get(i), firstname.get(i), lastname.get(i),
                password.get(i), username.get(i), timetable.get(i), daysworkingList.get(i)};
            table.addRow(row);

        }
    }

    public void loadSchoolPeriod() {
        String SQL = String.format(
                "SELECT * FROM \"ExamTime\".schoolperiods WHERE schoolid='%s' ORDER BY dayofweek, starttime;", schoolid);
        List<String> periodid = (readFromDatabase.readDatabase(SQL, "schoolperiodsid"));
        List<String> starttime = (readFromDatabase.readDatabase(SQL, "starttime"));
        List<String> endtime = (readFromDatabase.readDatabase(SQL, "endtime"));
        List<String> length = (readFromDatabase.readDatabase(SQL, "length"));
        List<String> dayofweek = (readFromDatabase.readDatabase(SQL, "dayofweek"));

        DefaultTableModel table = (DefaultTableModel) this.schoolPeriodExam.getModel();
        table.setRowCount(0);

        //add the items to the table
        for (int i = 0; i < periodid.size(); i++) {
            Object[] row = {periodid.get(i), starttime.get(i), endtime.get(i),
                length.get(i), dayofweek.get(i)};
            table.addRow(row);

        }
    }

    public void loadTimeslots() {
        //get all the timeslots in for this examperiod
        String SQL = String.format("select * from \"ExamTime\".timeslots where examperiodid=%s order by date, starttime;", 
                examSeriesId);

        List<String> periodid = (readFromDatabase.readDatabase(SQL, "timeslotid"));
        List<String> starttime = (readFromDatabase.readDatabase(SQL, "starttime"));
        List<String> endtime = (readFromDatabase.readDatabase(SQL, "endtime"));
        List<String> date = (readFromDatabase.readDatabase(SQL, "date"));
        List<String> lengthofPeriod = (readFromDatabase.readDatabase(SQL, "length"));

        DefaultTableModel table = (DefaultTableModel) this.timeslotstable.getModel();
        table.setRowCount(0);

        //add the items to the table
        for (int i = 0; i < periodid.size(); i++) {
            Object[] row = {periodid.get(i), starttime.get(i), endtime.get(i),
                lengthofPeriod.get(i), date.get(i)};
            table.addRow(row);

        }
    }

    public void print() {
        //make the paths for the files to be writen to 
        String domain = selectPath();
        if (!(domain == null)) {
            String pathExamTimetable = String.format("%s/ExamTimetable.xlsx", domain);
            String pathInvigulationTimetable = String.format("%s/InvigulationTimetable.xlsx", domain);

            //get the data for the exam timetable
            String mainSQL = String.format("""
                SELECT "ExamTime".exams.subjectname, "ExamTime".exams.name, "ExamTime".exams.length, 
                "ExamTime".timeslots."date", "ExamTime".timeslots.starttime, "ExamTime".rooms.roomname
                FROM "ExamTime".exams
                JOIN "ExamTime".rooms on "ExamTime".exams.roomid = rooms.roomid
                JOIN "ExamTime".timeslots on "ExamTime".exams.timeslotid = "ExamTime".timeslots.timeslotid
                WHERE "ExamTime".exams.examperiodid = %s 
                ORDER BY date ASC, starttime ASC;""", examSeriesId);

            List<String> subjectname = readDatabase(mainSQL, "subjectname");
            List<String> name = readDatabase(mainSQL, "name");
            List<String> length = readDatabase(mainSQL, "length");
            List<String> date = readDatabase(mainSQL, "date");
            List<String> starttime = readDatabase(mainSQL, "starttime");
            List<String> roomname = readDatabase(mainSQL, "roomname");

            Map<Integer, Object[]> data = new TreeMap<Integer, Object[]>();

            int id = 0;

            //write the titles for the columns
            data.put(id++, new Object[]{"DATE", "START-TIME", "SUBJECT-NAME", "EXAM", "LENGTH", "ROOM-NAME"});

            for (int i = 0; i < name.size(); i++) {
                data.put(id++, new Object[]{date.get(i), starttime.get(i), subjectname.get(i),
                    name.get(i), length.get(i), roomname.get(i)});

            }

            //get the data for the invigulation timetable
            String SQLinvigulation = String.format("""
                select "ExamTime".teachers.username, "ExamTime".rooms.roomname, "ExamTime".exams."name", "ExamTime".timeslots."date", 
                "ExamTime".schoolperiods.endtime,"ExamTime".schoolperiods.starttime, "ExamTime".schoolperiods.dayofweek  
                from "ExamTime".invigulation
                join "ExamTime".teachers on teachers.teacherid = invigulation.teacherid
                join "ExamTime".rooms on rooms.roomid = invigulation.roomid
                join "ExamTime".exams on exams.examid = invigulation.examid
                join "ExamTime".timeslots on invigulation.timeslotid = timeslots.timeslotid
                join "ExamTime".schoolperiods on schoolperiods.schoolperiodsid = invigulation.schoolperiodsid
                where "ExamTime".invigulation.examperiodid  = %s
                order by date asc, starttime asc;
                """, examSeriesId);

            List<String> teacher = readDatabase(SQLinvigulation, "username");
            List<String> roomnameInvig = readDatabase(SQLinvigulation, "roomname");
            List<String> examname = readDatabase(SQLinvigulation, "name");
            List<String> dateinvig = readDatabase(SQLinvigulation, "date");
            List<String> starttimeinvig = readDatabase(SQLinvigulation, "starttime");
            List<String> endtimeinivg = readDatabase(SQLinvigulation, "endtime");
            List<String> dayofweek = readDatabase(SQLinvigulation, "dayofweek");

            Map<Integer, Object[]> data2 = new TreeMap<Integer, Object[]>();

            int id2 = 0;

            data2.put(id2++, new Object[]{"DATE", "START-TIME", "END-TIME", "DAY-OF-WEEK",
                "EXAM", "INVIGULATOR", "ROOM"});

            for (int i = 0; i < teacher.size(); i++) {
                data2.put(id2++, new Object[]{dateinvig.get(i), starttimeinvig.get(i),
                    endtimeinivg.get(i), dayofweek.get(i),
                    examname.get(i), teacher.get(i), roomnameInvig.get(i)});

            }

            //write the excel file for the exam timetable
            try {
                writeToExcelFile(data, pathExamTimetable, "ExamTimetable");

                writeToExcelFile(data2, pathInvigulationTimetable, "InvigulationTimetable");
                JOptionPane.showMessageDialog(null,
                        "The timetable has now been printed",
                        "UPDATE",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,
                        "An error occured " + ex,
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String selectPath() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile().getAbsolutePath();
        }

        return null;
    }

    private static void writeToExcelFile(Map<Integer, Object[]> studentData, String path, String sheet)
            throws FileNotFoundException, IOException {
        //create the excel sheet to write to 
        // workbook object
        XSSFWorkbook workbook = new XSSFWorkbook();
        // spreadsheet object
        XSSFSheet spreadsheet = workbook.createSheet(sheet);
        // row object
        XSSFRow row;

        int rowid = 0;
        //get all the entries in the hashtable
        Set<Integer> keyid = studentData.keySet();

        // writing the data into the sheets...
        for (Integer key : keyid) {
            //create a row for each entry in the hash table
            row = spreadsheet.createRow(rowid++);
            //get the details
            Object[] objectArr = studentData.get(key);
            int cellid = 0;
            //for each object have a separate entry into the spreadsheet
            for (Object obj : objectArr) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue((String) obj);
            }
        }

        try ( // .xlsx is the format for Excel Sheets...
                // writing the workbook into the file...
                 FileOutputStream out = new FileOutputStream(new File(path))) {
            workbook.write(out);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "An error has occured,\n" + ex,
                    "ERROR",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

}
