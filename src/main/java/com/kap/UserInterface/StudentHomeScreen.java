/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kap.UserInterface;

import com.kap.examtimetabling.extras.readFromDatabase;
import static com.kap.examtimetabling.extras.readFromDatabase.readDatabase;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author katiepambakian
 */
public class StudentHomeScreen extends javax.swing.JFrame {
    public List<String> id;
    /**
     * Creates new form StudentHomeScreen
     */
    public StudentHomeScreen() {
        initComponents();
        //get the student's id
        id = LoginScreen.getId();
        load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutbt = new javax.swing.JButton();
        reloadbt = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentExamTimetable_table = new javax.swing.JTable();
        studentpersonal = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("STUDENT EXAM TIMETABLE");
        jLabel1.setToolTipText("");

        logoutbt.setText("LOGOUT");
        logoutbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutbtActionPerformed(evt);
            }
        });

        reloadbt.setText("RELOAD");
        reloadbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadbtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logoutbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reloadbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(logoutbt, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reloadbt, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(0, 51, 102));

        studentExamTimetable_table.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        studentExamTimetable_table.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        studentExamTimetable_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "EXAM", "SUBJECT", "DATE", "START-TIME", "LENGTH", "ROOM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studentExamTimetable_table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap())
        );

        studentpersonal.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        studentpersonal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        studentpersonal.setText("WELCOME ");

        printButton.setText("PRINT");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(studentpersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentpersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reloadbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadbtActionPerformed
        // TODO add your handling code here:
        load();
    }//GEN-LAST:event_reloadbtActionPerformed

    private void logoutbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutbtActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginScreen().setVisible(true);
    }//GEN-LAST:event_logoutbtActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            // TODO add your handling code here:
            print();
        } catch (PrinterException ex) {
            Logger.getLogger(StudentHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutbt;
    private javax.swing.JButton printButton;
    private javax.swing.JButton reloadbt;
    private javax.swing.JTable studentExamTimetable_table;
    private javax.swing.JLabel studentpersonal;
    // End of variables declaration//GEN-END:variables
    
    //method that will load the contense
    private void load(){
        //get the students name form the database

        String SQL = String.format("SELECT firstname FROM \"ExamTime\".students WHERE studentid = %d", 
                Integer.valueOf(id.get(0)));
        String columnLabel = "firstname";
        List<String> firstName = (readFromDatabase.readDatabase(SQL, columnLabel));
        
        String SQL2 = String.format("SELECT lastname FROM \"ExamTime\".students WHERE studentid = %d", 
                Integer.valueOf(id.get(0)));
        
        String columnLabel2 = "lastname";
        List<String> lastName = (readFromDatabase.readDatabase(SQL2, columnLabel2));
        //change the text in the label so their name is on screen
        studentpersonal.setText("Welcome: "+ firstName.get(0) + " "+lastName.get(0));

        //display the students infomation
        
        
        String mainSQL = String.format("SELECT \"ExamTime\".studies.subjectname, \"ExamTime\".exams.name, \"ExamTime\".exams.length, " +
"                \"ExamTime\".timeslots.\"date\", \"ExamTime\".timeslots.starttime, \"ExamTime\".rooms.roomname, " +
"                \"ExamTime\".sitting.examperiodid " +
"            FROM \"ExamTime\".exams " +
"            JOIN \"ExamTime\".studies on \"ExamTime\".studies.subjectname = \"ExamTime\".exams.subjectname " +
"            JOIN \"ExamTime\".rooms on \"ExamTime\".exams.roomid = rooms.roomid " +
"            JOIN \"ExamTime\".timeslots on \"ExamTime\".exams.timeslotid = \"ExamTime\".timeslots.timeslotid " +
"         	join \"ExamTime\".sitting on \"ExamTime\".sitting.studentid = %s " +
"            WHERE \"ExamTime\".studies.studentid = %s and \"ExamTime\".sitting.examperiodid = \"ExamTime\".exams.examperiodid\n" +
"            ORDER BY date ASC, starttime ASC;", id.get(0), id.get(0));
        
        List<String> subjects = readDatabase(mainSQL, "subjectname");
        List<String> examName = readDatabase(mainSQL, "name");
        List<String> examLength = readDatabase(mainSQL, "length");
        List<String> date = readDatabase(mainSQL, "date");
        List<String> starttime = readDatabase(mainSQL, "starttime");
        List<String> rooms = readDatabase(mainSQL, "roomname");
        
        //clear the table
        DefaultTableModel dtm = (DefaultTableModel) studentExamTimetable_table.getModel();
        dtm.setRowCount(0);

        DefaultTableModel model = (DefaultTableModel) studentExamTimetable_table.getModel();
        //add the items to the table
        for (int i=0; i<examName.size();i++){
            Object[] row = {examName.get(i), subjects.get(i), date.get(i), starttime.get(i), 
                examLength.get(i), rooms.get(i)};
            model.addRow(row);
        }
    }
    
    private void print() throws PrinterException{
        //tree to hold the data to be writen
        Map<Integer, Object[]> studentData = new TreeMap<Integer, Object[]>();
        //get the table model
        DefaultTableModel model = (DefaultTableModel) studentExamTimetable_table.getModel();
        Integer rows = model.getRowCount();
        
        Integer id = 0;
        //header for the spreadsheet
        studentData.put(id++, new Object[] {"Exam", "Subject", "Date","Start-Time","Length", "Location"});
        
        //read the contense of the table
        for (int i=0;i<rows;i++){
            List<String> rowToAdd = new ArrayList<>();
            rowToAdd.add((String) model.getValueAt(i, 0));
            rowToAdd.add((String) model.getValueAt(i, 1));
            rowToAdd.add((String) model.getValueAt(i, 2));
            rowToAdd.add((String) model.getValueAt(i, 3));
            rowToAdd.add((String) model.getValueAt(i, 4));
            rowToAdd.add((String) model.getValueAt(i, 5));
            studentData.put(id++, rowToAdd.toArray());
        }
        //allow the user to select where the file should be stored
        String directory = selectPath();
        if (!(directory == null)){
            //get their name from the personal string 
            String welcomeAndName = studentpersonal.getText();
            //get the message after the welcome
            String[] parts = welcomeAndName.split(": ");
            String path = String.format("%s/%sExamTimetable.xlsx",
                    directory ,parts[1]);

            try{
                //write the excel file
                writeToExcelFile(studentData, path,"ExamTimetable");
                JOptionPane.showMessageDialog(null, 
                                  "The timetable has now been printed",
                                  "UPDATE", 
                                  JOptionPane.INFORMATION_MESSAGE);
            }catch(IOException ex){
                //error 
                JOptionPane.showMessageDialog(null, 
                                  "An error has occured,\n" + ex, 
                                  "ERROR", 
                                  JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    private String selectPath(){
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY );

        if( fc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ){
            return fc.getSelectedFile().getAbsolutePath();
        }

        return null;
    }
    
    private static void writeToExcelFile(Map<Integer, Object[]> studentData, String path, String sheet) 
            throws FileNotFoundException, IOException{
        //create the excel sheet to write to 
        // workbook object
        XSSFWorkbook workbook = new XSSFWorkbook();
        // spreadsheet object
        XSSFSheet spreadsheet = workbook.createSheet(sheet);
        // row object
        XSSFRow row;
        
        int rowid = 0;
        //get all the entries in the hashtable
        Set<Integer> keyid = studentData.keySet();
        
        // writing the data into the sheets...
        for (Integer key :keyid){
            //create a row for each entry in the hash table
            row = spreadsheet.createRow(rowid++);
            //get the details
            Object[] objectArr = studentData.get(key);
            int cellid = 0;
            //for each object have a separate entry into the spreadsheet
            for (Object obj : objectArr) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue((String)obj);
            }
        }
        
        try ( // .xlsx is the format for Excel Sheets...
        // writing the workbook into the file...
                FileOutputStream out = new FileOutputStream(new File(path))) {
            workbook.write(out);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, 
                              "An error has occured,\n" + ex, 
                              "ERROR", 
                              JOptionPane.WARNING_MESSAGE);
        }
    }
    
}
