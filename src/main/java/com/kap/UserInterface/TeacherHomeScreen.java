/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kap.UserInterface;

import com.kap.examtimetabling.extras.readFromDatabase;
import static com.kap.examtimetabling.extras.readFromDatabase.readDatabase;
import java.awt.Component;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author katiepambakian
 */
public class TeacherHomeScreen extends javax.swing.JFrame {
    public List<String> id;
    /**
     * Creates new form TeacherHomeScreen
     */
    public TeacherHomeScreen() {
        initComponents();
        id = LoginScreen.getId();
        
        loadTeacherData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        personal_bt = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        teacherinvigulationtietable_label = new javax.swing.JLabel();
        logout_bt = new javax.swing.JButton();
        reload_bt = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invigulationTimetable_table = new javax.swing.JTable();
        personalLabellb = new javax.swing.JLabel();
        generateRegisterbt = new javax.swing.JButton();
        printbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        personal_bt.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        teacherinvigulationtietable_label.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        teacherinvigulationtietable_label.setForeground(new java.awt.Color(255, 255, 255));
        teacherinvigulationtietable_label.setText("TEACHER INVIGULATION TIMETABLE");

        logout_bt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        logout_bt.setText("LOG OUT");
        logout_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btActionPerformed(evt);
            }
        });

        reload_bt.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        reload_bt.setText("RELOAD");
        reload_bt.setToolTipText("");
        reload_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_btActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teacherinvigulationtietable_label, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout_bt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reload_bt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(logout_bt, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reload_bt, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                    .addComponent(teacherinvigulationtietable_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(0, 51, 102));

        invigulationTimetable_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DATE", "START-TIME", "ROOM", "EXAM", "SUBJECT", "LENGTH-NORM", "LENGTH-25%", "LENGTH-50%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(invigulationTimetable_table);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        personalLabellb.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        personalLabellb.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personalLabellb.setText("WELCOME: ");

        generateRegisterbt.setText("GENERATE REGISTER");
        generateRegisterbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRegisterbtActionPerformed(evt);
            }
        });

        printbutton.setText("PRINT");
        printbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout personal_btLayout = new javax.swing.GroupLayout(personal_bt);
        personal_bt.setLayout(personal_btLayout);
        personal_btLayout.setHorizontalGroup(
            personal_btLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personal_btLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateRegisterbt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(personalLabellb, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(personal_btLayout.createSequentialGroup()
                .addGroup(personal_btLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        personal_btLayout.setVerticalGroup(
            personal_btLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personal_btLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personal_btLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personalLabellb, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(generateRegisterbt)
                    .addComponent(printbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(personal_bt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(personal_bt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reload_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reload_btActionPerformed
        // TODO add your handling code here:
        loadTeacherData();
    }//GEN-LAST:event_reload_btActionPerformed

    private void logout_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginScreen().setVisible(true);
    }//GEN-LAST:event_logout_btActionPerformed

    private void generateRegisterbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRegisterbtActionPerformed
        // TODO add your handling code here:
        new search().setVisible(true);
    }//GEN-LAST:event_generateRegisterbtActionPerformed

    private void printbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printbuttonActionPerformed
        try {
            //call the print method
            print();
        } catch (PrinterException ex) {
            //error 
            JOptionPane.showMessageDialog(null, 
                              "An error has occured,\n" + ex, 
                              "ERROR", 
                              JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_printbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateRegisterbt;
    private javax.swing.JTable invigulationTimetable_table;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout_bt;
    private javax.swing.JLabel personalLabellb;
    private javax.swing.JPanel personal_bt;
    private javax.swing.JButton printbutton;
    private javax.swing.JButton reload_bt;
    private javax.swing.JLabel teacherinvigulationtietable_label;
    // End of variables declaration//GEN-END:variables
    
    public void loadTeacherData(){
        DefaultTableModel dtm = (DefaultTableModel) invigulationTimetable_table.getModel();
        dtm.setRowCount(0);
        
        //get the teachers name and display in label
        String SQL = String.format("SELECT firstname FROM \"ExamTime\".teachers WHERE teacherid = %d", 
                Integer.valueOf(id.get(0)));
        String columnLabel = "firstname";
        List<String> firstName = (readFromDatabase.readDatabase(SQL, columnLabel));
        
        String SQL2 = String.format("SELECT lastname FROM \"ExamTime\".teachers WHERE teacherid = %d", 
                Integer.valueOf(id.get(0)));
        
        String columnLabel2 = "lastname";
        List<String> lastName = (readFromDatabase.readDatabase(SQL2, columnLabel2));
        //change the text in the label so their name is on screen
        personalLabellb.setText("Welcome: "+ firstName.get(0) + " "+lastName.get(0));
        
        DefaultTableModel model = (DefaultTableModel) invigulationTimetable_table.getModel();
       
        String mainSQL = String.format("select \"ExamTime\".invigulation.invigulationid, \"ExamTime\".timeslots.date,"
                + " \"ExamTime\".schoolperiods.starttime, " +
            "rooms.roomname, exams.name, exams.length, exams.subjectname " +
            "from \"ExamTime\".invigulation" +
            " full join \"ExamTime\".timeslots on timeslots.timeslotid = invigulation.timeslotid" +
            " full join \"ExamTime\".schoolperiods on schoolperiods.schoolperiodsid = invigulation.schoolperiodsid" +
            " full join \"ExamTime\".exams on exams.examid = invigulation.examid" +
            " full join \"ExamTime\".rooms on rooms.roomid = invigulation.roomid" +
            " where invigulation.teacherid = %d" +
            " order by date asc, starttime ASC;", Integer.valueOf(id.get(0)));
       
        List<String> date = readDatabase(mainSQL, "date");
        List<String> starttime = readDatabase(mainSQL, "starttime");
        List<String> roomname = readDatabase(mainSQL, "roomname");
        List<String> name = readDatabase(mainSQL, "name");
        List<String> length = readDatabase(mainSQL, "length");
        List<String> subjectname = readDatabase(mainSQL, "subjectname");
        
        for (int i=0; i<date.size();i++){
            //calculate the length of the extra time
            Integer len = Integer.valueOf(length.get(i));
            Double et25 = len *1.25;
            Double et50 = len *1.5;
            
            Object[] row = {date.get(i), starttime.get(i), roomname.get(i), name.get(i), 
                subjectname.get(i),length.get(i), et25, et50};
            model.addRow(row);
        }
    }
    
    private void print() throws PrinterException{
        //tree to hold the data to be writen
        Map<Integer, Object[]> teacherData = new TreeMap<Integer, Object[]>();
        //get the table model
        DefaultTableModel model = (DefaultTableModel) invigulationTimetable_table.getModel();
        Integer rows = model.getRowCount();
        
        Integer id = 0;
        //header for the spreadsheet
        teacherData.put(id++, new Object[] {"Date", "Start-time", "Location","Exam","Subject", 
            "Length-Norm","Length-25%", "Length-50%"});
        
        //read the contense of the table
        for (int i=0;i<rows;i++){
            List<String> rowToAdd = new ArrayList<>();
            rowToAdd.add((String) model.getValueAt(i, 0));
            rowToAdd.add((String) model.getValueAt(i, 1));
            rowToAdd.add((String) model.getValueAt(i, 2));
            rowToAdd.add((String) model.getValueAt(i, 3));
            rowToAdd.add((String) model.getValueAt(i, 4));
            rowToAdd.add((String) model.getValueAt(i, 5));
            rowToAdd.add((String) model.getValueAt(i, 6).toString());
            rowToAdd.add((String) model.getValueAt(i, 7).toString());
            teacherData.put(id++, rowToAdd.toArray());
        }
        //allow the user to select where the file should be stored
        String directory = selectPath();
        if (!(directory == null)){
            //get their name from the personal string 
            String welcomeAndName = personalLabellb.getText();
            //get the message after the welcome
            String[] parts = welcomeAndName.split(": ");
            String path = String.format("%s/%sExamTimetable.xlsx",directory ,parts[1]);

            try{
                //write the excel file
                writeToExcelFile(teacherData, path,"ExamTimetable");
                JOptionPane.showMessageDialog(null, 
                                  "The timetable has now been printed",
                                  "UPDATE", 
                                  JOptionPane.INFORMATION_MESSAGE);
            }catch(IOException ex){
                //error 
                JOptionPane.showMessageDialog(null, 
                                  "An error has occured,\n" + ex, 
                                  "ERROR", 
                                  JOptionPane.WARNING_MESSAGE);
            }
        }
        
    }
    private String selectPath(){
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY );

        if( fc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ){
            return fc.getSelectedFile().getAbsolutePath();
        }

        return null;
    }
    
    private static void writeToExcelFile(Map<Integer, Object[]> studentData, String path, String sheet) 
            throws FileNotFoundException, IOException{
        //create the excel sheet to write to 
        // workbook object
        XSSFWorkbook workbook = new XSSFWorkbook();
        // spreadsheet object
        XSSFSheet spreadsheet = workbook.createSheet(sheet);
        // row object
        XSSFRow row;
        
        int rowid = 0;
        //get all the entries in the hashtable
        Set<Integer> keyid = studentData.keySet();
        
        // writing the data into the sheets...
        for (Integer key :keyid){
            //create a row for each entry in the hash table
            row = spreadsheet.createRow(rowid++);
            //get the details
            Object[] objectArr = studentData.get(key);
            int cellid = 0;
            //for each object have a separate entry into the spreadsheet
            for (Object obj : objectArr) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue((String)obj);
            }
        }
        
        try ( // .xlsx is the format for Excel Sheets...
        // writing the workbook into the file...
                FileOutputStream out = new FileOutputStream(new File(path))) {
            workbook.write(out);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, 
                              "An error has occured,\n" + ex, 
                              "ERROR", 
                              JOptionPane.WARNING_MESSAGE);
        }
    }
    
}
